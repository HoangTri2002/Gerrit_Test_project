
TrafficLightAsss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e3c  08004e3c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000090  08004ed4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004ed4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163b1  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d10  00000000  00000000  0003646a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00039180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ffd  00000000  00000000  0003abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba6  00000000  00000000  00054bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3d7  00000000  00000000  00066773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000f1ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d48 	.word	0x08004d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004d48 	.word	0x08004d48

0800014c <Buzzer_RUN>:
 */

#include "Buzzer.h"

void Buzzer_RUN()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer5_flag)
 8000150:	4b2e      	ldr	r3, [pc, #184]	; (800020c <Buzzer_RUN+0xc0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d04e      	beq.n	80001f6 <Buzzer_RUN+0xaa>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, time_frequency);
 8000158:	4b2d      	ldr	r3, [pc, #180]	; (8000210 <Buzzer_RUN+0xc4>)
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	4b2d      	ldr	r3, [pc, #180]	; (8000214 <Buzzer_RUN+0xc8>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(time_buzzer/2);
 8000162:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <Buzzer_RUN+0xcc>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	0fda      	lsrs	r2, r3, #31
 8000168:	4413      	add	r3, r2
 800016a:	105b      	asrs	r3, r3, #1
 800016c:	4618      	mov	r0, r3
 800016e:	f001 faa5 	bl	80016bc <setTimer6>
		if(timer2_counter<300)  // led pedestrian is located at traffic light 2.
 8000172:	4b2a      	ldr	r3, [pc, #168]	; (800021c <Buzzer_RUN+0xd0>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800017a:	da1d      	bge.n	80001b8 <Buzzer_RUN+0x6c>
		{
			time_frequency =time_frequency* 3;
 800017c:	4b24      	ldr	r3, [pc, #144]	; (8000210 <Buzzer_RUN+0xc4>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4613      	mov	r3, r2
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	4413      	add	r3, r2
 8000186:	4a22      	ldr	r2, [pc, #136]	; (8000210 <Buzzer_RUN+0xc4>)
 8000188:	6013      	str	r3, [r2, #0]
			time_buzzer = (timer2_counter>0)? timer2_counter/6 : time_buzzer/5;
 800018a:	4b24      	ldr	r3, [pc, #144]	; (800021c <Buzzer_RUN+0xd0>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	dd07      	ble.n	80001a2 <Buzzer_RUN+0x56>
 8000192:	4b22      	ldr	r3, [pc, #136]	; (800021c <Buzzer_RUN+0xd0>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a22      	ldr	r2, [pc, #136]	; (8000220 <Buzzer_RUN+0xd4>)
 8000198:	fb82 1203 	smull	r1, r2, r2, r3
 800019c:	17db      	asrs	r3, r3, #31
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	e007      	b.n	80001b2 <Buzzer_RUN+0x66>
 80001a2:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <Buzzer_RUN+0xcc>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a1f      	ldr	r2, [pc, #124]	; (8000224 <Buzzer_RUN+0xd8>)
 80001a8:	fb82 1203 	smull	r1, r2, r2, r3
 80001ac:	1052      	asrs	r2, r2, #1
 80001ae:	17db      	asrs	r3, r3, #31
 80001b0:	1ad3      	subs	r3, r2, r3
 80001b2:	4a19      	ldr	r2, [pc, #100]	; (8000218 <Buzzer_RUN+0xcc>)
 80001b4:	6013      	str	r3, [r2, #0]
 80001b6:	e009      	b.n	80001cc <Buzzer_RUN+0x80>
		}
		else
		{
		    time_frequency = time_frequency+100;
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <Buzzer_RUN+0xc4>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	3364      	adds	r3, #100	; 0x64
 80001be:	4a14      	ldr	r2, [pc, #80]	; (8000210 <Buzzer_RUN+0xc4>)
 80001c0:	6013      	str	r3, [r2, #0]
			time_buzzer = time_buzzer- 100;
 80001c2:	4b15      	ldr	r3, [pc, #84]	; (8000218 <Buzzer_RUN+0xcc>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	3b64      	subs	r3, #100	; 0x64
 80001c8:	4a13      	ldr	r2, [pc, #76]	; (8000218 <Buzzer_RUN+0xcc>)
 80001ca:	6013      	str	r3, [r2, #0]
		}


		if(time_frequency >= 1000)
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <Buzzer_RUN+0xc4>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001d4:	db03      	blt.n	80001de <Buzzer_RUN+0x92>
		{
			time_frequency = 1000;
 80001d6:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <Buzzer_RUN+0xc4>)
 80001d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001dc:	601a      	str	r2, [r3, #0]
		}
		if(time_buzzer <= 100)
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <Buzzer_RUN+0xcc>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b64      	cmp	r3, #100	; 0x64
 80001e4:	dc02      	bgt.n	80001ec <Buzzer_RUN+0xa0>
		{
			time_buzzer = 100;
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <Buzzer_RUN+0xcc>)
 80001e8:	2264      	movs	r2, #100	; 0x64
 80001ea:	601a      	str	r2, [r3, #0]
		}
		setTimer5(time_buzzer);
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <Buzzer_RUN+0xcc>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fa47 	bl	8001684 <setTimer5>
	}
	if(timer6_flag)
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <Buzzer_RUN+0xdc>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d003      	beq.n	8000206 <Buzzer_RUN+0xba>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <Buzzer_RUN+0xc8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2200      	movs	r2, #0
 8000204:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000014c 	.word	0x2000014c
 8000210:	200000f0 	.word	0x200000f0
 8000214:	2000017c 	.word	0x2000017c
 8000218:	200000ec 	.word	0x200000ec
 800021c:	20000130 	.word	0x20000130
 8000220:	2aaaaaab 	.word	0x2aaaaaab
 8000224:	66666667 	.word	0x66666667
 8000228:	20000154 	.word	0x20000154

0800022c <fsm_automode>:
 * First state of automatic mode:
 * Traffic light 1 : GREEN ON.
 * Traffic light 2: RED ON.
 */
void fsm_automode()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	// index=0: traffic light 1         and  index=1 : traffic light 2
	switch(status_light)
 8000230:	4ba2      	ldr	r3, [pc, #648]	; (80004bc <fsm_automode+0x290>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b04      	cmp	r3, #4
 8000236:	f200 81c1 	bhi.w	80005bc <fsm_automode+0x390>
 800023a:	a201      	add	r2, pc, #4	; (adr r2, 8000240 <fsm_automode+0x14>)
 800023c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000240:	08000255 	.word	0x08000255
 8000244:	0800027d 	.word	0x0800027d
 8000248:	08000339 	.word	0x08000339
 800024c:	08000407 	.word	0x08000407
 8000250:	080004f9 	.word	0x080004f9
	{
	     case  AUTO_INIT:
	    	   clearLED(2);
 8000254:	2002      	movs	r0, #2
 8000256:	f000 ff95 	bl	8001184 <clearLED>
	    	   // setTimer for  GREEN1/ traffic light 1.
	    	   setTimer1(time_led_green_1);
 800025a:	4b99      	ldr	r3, [pc, #612]	; (80004c0 <fsm_automode+0x294>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f9a0 	bl	80015a4 <setTimer1>
	    	   // set timer for REDD2 / traffic light 2.
	    	   setTimer2(time_led_red_2);
 8000264:	4b97      	ldr	r3, [pc, #604]	; (80004c4 <fsm_automode+0x298>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f001 f9b7 	bl	80015dc <setTimer2>
	    	   setTimer4(10);
 800026e:	200a      	movs	r0, #10
 8000270:	f001 f9ec 	bl	800164c <setTimer4>
	    	   status_light=AUTO_GREEN_1;
 8000274:	4b91      	ldr	r3, [pc, #580]	; (80004bc <fsm_automode+0x290>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
	    break;
 800027a:	e1a8      	b.n	80005ce <fsm_automode+0x3a2>
	     case  AUTO_GREEN_1:
	    	   ToggleLEDGreen(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f000 ff07 	bl	8001090 <ToggleLEDGreen>
               ToggleLEDRed(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f000 fe84 	bl	8000f90 <ToggleLEDRed>
               sendDATA();
 8000288:	f000 fcb8 	bl	8000bfc <sendDATA>
               if(timer1_flag==1)
 800028c:	4b8e      	ldr	r3, [pc, #568]	; (80004c8 <fsm_automode+0x29c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d107      	bne.n	80002a4 <fsm_automode+0x78>
               {
            	   setTimer1(time_led_yellow_1);
 8000294:	4b8d      	ldr	r3, [pc, #564]	; (80004cc <fsm_automode+0x2a0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f983 	bl	80015a4 <setTimer1>
            	   status_light=AUTO_YELLOW_1;
 800029e:	4b87      	ldr	r3, [pc, #540]	; (80004bc <fsm_automode+0x290>)
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
                // AUTO GREEN 1:  Pedestrian state is PEDE_GO because pedes_light is located in traffic light 2, In current, traffic light 2 is red => PEDES_Light = GREEN.
   			if(is_button_pressed(0))
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fe33 	bl	8000f10 <is_button_pressed>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d011      	beq.n	80002d4 <fsm_automode+0xa8>
   			{ // button of pedestrian is pressed().
   				setTimer5(BUZZER_DUTY_CYCLE);
 80002b0:	f240 5014 	movw	r0, #1300	; 0x514
 80002b4:	f001 f9e6 	bl	8001684 <setTimer5>
   				setTimer3(TIME_PEDESTRIAN_LIGHT);                            // 20.000 (20s).
 80002b8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80002bc:	f001 f9aa 	bl	8001614 <setTimer3>
 				status_pedes = PEDES_GO;
 80002c0:	4b83      	ldr	r3, [pc, #524]	; (80004d0 <fsm_automode+0x2a4>)
 80002c2:	220a      	movs	r2, #10
 80002c4:	601a      	str	r2, [r3, #0]
                time_buzzer=BUZZER_DUTY_CYCLE;
 80002c6:	4b83      	ldr	r3, [pc, #524]	; (80004d4 <fsm_automode+0x2a8>)
 80002c8:	f240 5214 	movw	r2, #1300	; 0x514
 80002cc:	601a      	str	r2, [r3, #0]
                time_frequency=BUZZER_FREQUENCY_START;
 80002ce:	4b82      	ldr	r3, [pc, #520]	; (80004d8 <fsm_automode+0x2ac>)
 80002d0:	2232      	movs	r2, #50	; 0x32
 80002d2:	601a      	str	r2, [r3, #0]
   			}

           // TODO: implementation fsm_button for TUNNING MODE.
   			if(is_button_pressed(2))  // button 2 is pressed.
 80002d4:	2002      	movs	r0, #2
 80002d6:	f000 fe1b 	bl	8000f10 <is_button_pressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d015      	beq.n	800030c <fsm_automode+0xe0>
   			{
   				status_light=SETTING_LED_RED;
 80002e0:	4b76      	ldr	r3, [pc, #472]	; (80004bc <fsm_automode+0x290>)
 80002e2:	220b      	movs	r2, #11
 80002e4:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80002e6:	4b7a      	ldr	r3, [pc, #488]	; (80004d0 <fsm_automode+0x2a4>)
 80002e8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ec:	601a      	str	r2, [r3, #0]
   				time_setting_red=time_led_red_1;
 80002ee:	4b7b      	ldr	r3, [pc, #492]	; (80004dc <fsm_automode+0x2b0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a7b      	ldr	r2, [pc, #492]	; (80004e0 <fsm_automode+0x2b4>)
 80002f4:	6013      	str	r3, [r2, #0]
   				time_setting_green=time_led_green_1;
 80002f6:	4b72      	ldr	r3, [pc, #456]	; (80004c0 <fsm_automode+0x294>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a7a      	ldr	r2, [pc, #488]	; (80004e4 <fsm_automode+0x2b8>)
 80002fc:	6013      	str	r3, [r2, #0]
   				time_setting_yellow=time_led_yellow_1;
 80002fe:	4b73      	ldr	r3, [pc, #460]	; (80004cc <fsm_automode+0x2a0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a79      	ldr	r2, [pc, #484]	; (80004e8 <fsm_automode+0x2bc>)
 8000304:	6013      	str	r3, [r2, #0]
				setTimer8(12);
 8000306:	200c      	movs	r0, #12
 8000308:	f001 fa10 	bl	800172c <setTimer8>
   			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
   			if(is_button_pressed(1))  // button 1 is pressed.
 800030c:	2001      	movs	r0, #1
 800030e:	f000 fdff 	bl	8000f10 <is_button_pressed>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	f000 8153 	beq.w	80005c0 <fsm_automode+0x394>
   			{
   				status_light=MAN_GREEN_1;
 800031a:	4b68      	ldr	r3, [pc, #416]	; (80004bc <fsm_automode+0x290>)
 800031c:	2205      	movs	r2, #5
 800031e:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000320:	4b6b      	ldr	r3, [pc, #428]	; (80004d0 <fsm_automode+0x2a4>)
 8000322:	f04f 32ff 	mov.w	r2, #4294967295
 8000326:	601a      	str	r2, [r3, #0]
   				setTimer9(TIME_MANUAL_MODE);
 8000328:	f242 7010 	movw	r0, #10000	; 0x2710
 800032c:	f001 fa1a 	bl	8001764 <setTimer9>
   				setTimer4(10);
 8000330:	200a      	movs	r0, #10
 8000332:	f001 f98b 	bl	800164c <setTimer4>
   			}

	    break;
 8000336:	e143      	b.n	80005c0 <fsm_automode+0x394>
	     case  AUTO_YELLOW_1:   // 3s => 3s
	    	   ToggleLEDYellow(0);
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fe69 	bl	8001010 <ToggleLEDYellow>
               ToggleLEDRed(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fe26 	bl	8000f90 <ToggleLEDRed>
               sendDATA();
 8000344:	f000 fc5a 	bl	8000bfc <sendDATA>
               if(timer1_flag==1 && timer2_flag==1)
 8000348:	4b5f      	ldr	r3, [pc, #380]	; (80004c8 <fsm_automode+0x29c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d110      	bne.n	8000372 <fsm_automode+0x146>
 8000350:	4b66      	ldr	r3, [pc, #408]	; (80004ec <fsm_automode+0x2c0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d10c      	bne.n	8000372 <fsm_automode+0x146>
               {
            	   setTimer1(time_led_red_1);
 8000358:	4b60      	ldr	r3, [pc, #384]	; (80004dc <fsm_automode+0x2b0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f921 	bl	80015a4 <setTimer1>
            	   setTimer2(time_led_green_2);
 8000362:	4b63      	ldr	r3, [pc, #396]	; (80004f0 <fsm_automode+0x2c4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f001 f938 	bl	80015dc <setTimer2>
            	   status_light=AUTO_GREEN_2;
 800036c:	4b53      	ldr	r3, [pc, #332]	; (80004bc <fsm_automode+0x290>)
 800036e:	2203      	movs	r2, #3
 8000370:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
      			if(is_button_pressed(0))
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fdcc 	bl	8000f10 <is_button_pressed>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d011      	beq.n	80003a2 <fsm_automode+0x176>
      			{ // button of pedestrian is pressed().
      				setTimer5(BUZZER_DUTY_CYCLE);
 800037e:	f240 5014 	movw	r0, #1300	; 0x514
 8000382:	f001 f97f 	bl	8001684 <setTimer5>
      				setTimer3(TIME_PEDESTRIAN_LIGHT);
 8000386:	f644 6020 	movw	r0, #20000	; 0x4e20
 800038a:	f001 f943 	bl	8001614 <setTimer3>
      				status_pedes = PEDES_GO;
 800038e:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <fsm_automode+0x2a4>)
 8000390:	220a      	movs	r2, #10
 8000392:	601a      	str	r2, [r3, #0]
                    time_buzzer=BUZZER_DUTY_CYCLE;
 8000394:	4b4f      	ldr	r3, [pc, #316]	; (80004d4 <fsm_automode+0x2a8>)
 8000396:	f240 5214 	movw	r2, #1300	; 0x514
 800039a:	601a      	str	r2, [r3, #0]
                    time_frequency=BUZZER_FREQUENCY_START;
 800039c:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <fsm_automode+0x2ac>)
 800039e:	2232      	movs	r2, #50	; 0x32
 80003a0:	601a      	str	r2, [r3, #0]
      			}
           // TODO: implementation fsm_button for TUNNING MODE.
       			if(is_button_pressed(2))  // button 2 is pressed.
 80003a2:	2002      	movs	r0, #2
 80003a4:	f000 fdb4 	bl	8000f10 <is_button_pressed>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d015      	beq.n	80003da <fsm_automode+0x1ae>
       			{
       				status_light=SETTING_LED_RED;
 80003ae:	4b43      	ldr	r3, [pc, #268]	; (80004bc <fsm_automode+0x290>)
 80003b0:	220b      	movs	r2, #11
 80003b2:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <fsm_automode+0x2a4>)
 80003b6:	f04f 32ff 	mov.w	r2, #4294967295
 80003ba:	601a      	str	r2, [r3, #0]
       				time_setting_red=time_led_red_1;
 80003bc:	4b47      	ldr	r3, [pc, #284]	; (80004dc <fsm_automode+0x2b0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a47      	ldr	r2, [pc, #284]	; (80004e0 <fsm_automode+0x2b4>)
 80003c2:	6013      	str	r3, [r2, #0]
       				time_setting_green=time_led_green_1;
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <fsm_automode+0x294>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a46      	ldr	r2, [pc, #280]	; (80004e4 <fsm_automode+0x2b8>)
 80003ca:	6013      	str	r3, [r2, #0]
       				time_setting_yellow=time_led_yellow_1;
 80003cc:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <fsm_automode+0x2a0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a45      	ldr	r2, [pc, #276]	; (80004e8 <fsm_automode+0x2bc>)
 80003d2:	6013      	str	r3, [r2, #0]
    				setTimer8(12);
 80003d4:	200c      	movs	r0, #12
 80003d6:	f001 f9a9 	bl	800172c <setTimer8>
       			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
       			if(is_button_pressed(1))  // button 1 is pressed.
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 fd98 	bl	8000f10 <is_button_pressed>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 80ee 	beq.w	80005c4 <fsm_automode+0x398>
       			{
       				status_light=MAN_YELLOW_1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	; (80004bc <fsm_automode+0x290>)
 80003ea:	2206      	movs	r2, #6
 80003ec:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80003ee:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <fsm_automode+0x2a4>)
 80003f0:	f04f 32ff 	mov.w	r2, #4294967295
 80003f4:	601a      	str	r2, [r3, #0]
       				setTimer9(TIME_MANUAL_MODE);
 80003f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80003fa:	f001 f9b3 	bl	8001764 <setTimer9>
       				setTimer4(10);
 80003fe:	200a      	movs	r0, #10
 8000400:	f001 f924 	bl	800164c <setTimer4>
       			}

	    break;
 8000404:	e0de      	b.n	80005c4 <fsm_automode+0x398>
	     case  AUTO_GREEN_2:
	    	   ToggleLEDRed(0);   // RED 1 on
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fdc2 	bl	8000f90 <ToggleLEDRed>
               ToggleLEDGreen(1);  // GREEN 2 on
 800040c:	2001      	movs	r0, #1
 800040e:	f000 fe3f 	bl	8001090 <ToggleLEDGreen>
               sendDATA();
 8000412:	f000 fbf3 	bl	8000bfc <sendDATA>
               if(timer2_flag==1)
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <fsm_automode+0x2c0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d107      	bne.n	800042e <fsm_automode+0x202>
               {
            	   //setTimer3(time_led_red_1);
            	   setTimer2(time_led_yellow_2);
 800041e:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <fsm_automode+0x2c8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f001 f8da 	bl	80015dc <setTimer2>
            	   status_light=AUTO_YELLOW_2;
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <fsm_automode+0x290>)
 800042a:	2204      	movs	r2, #4
 800042c:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
   			if(is_button_pressed(0))
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fd6e 	bl	8000f10 <is_button_pressed>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d00d      	beq.n	8000456 <fsm_automode+0x22a>
   			{
   				setTimer3(TIME_PEDESTRIAN_LIGHT);
 800043a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800043e:	f001 f8e9 	bl	8001614 <setTimer3>
   				status_pedes =	PEDES_STOP;
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <fsm_automode+0x2a4>)
 8000444:	2209      	movs	r2, #9
 8000446:	601a      	str	r2, [r3, #0]
   				time_buzzer = BUZZER_DUTY_CYCLE;
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <fsm_automode+0x2a8>)
 800044a:	f240 5214 	movw	r2, #1300	; 0x514
 800044e:	601a      	str	r2, [r3, #0]
   				time_frequency = BUZZER_FREQUENCY_START;
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <fsm_automode+0x2ac>)
 8000452:	2232      	movs	r2, #50	; 0x32
 8000454:	601a      	str	r2, [r3, #0]
   			}

           // TODO: implementation fsm_button for TUNNING MODE.
   			if(is_button_pressed(2))  // button 2 is pressed.
 8000456:	2002      	movs	r0, #2
 8000458:	f000 fd5a 	bl	8000f10 <is_button_pressed>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d015      	beq.n	800048e <fsm_automode+0x262>
   			{
   				status_light=SETTING_LED_RED;
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <fsm_automode+0x290>)
 8000464:	220b      	movs	r2, #11
 8000466:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <fsm_automode+0x2a4>)
 800046a:	f04f 32ff 	mov.w	r2, #4294967295
 800046e:	601a      	str	r2, [r3, #0]
   				time_setting_red=time_led_red_1;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <fsm_automode+0x2b0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <fsm_automode+0x2b4>)
 8000476:	6013      	str	r3, [r2, #0]
   				time_setting_green=time_led_green_1;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <fsm_automode+0x294>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <fsm_automode+0x2b8>)
 800047e:	6013      	str	r3, [r2, #0]
   				time_setting_yellow=time_led_yellow_1;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <fsm_automode+0x2a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <fsm_automode+0x2bc>)
 8000486:	6013      	str	r3, [r2, #0]
				setTimer8(12);
 8000488:	200c      	movs	r0, #12
 800048a:	f001 f94f 	bl	800172c <setTimer8>
   			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
 			if(is_button_pressed(1))  // button 1 is pressed.
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fd3e 	bl	8000f10 <is_button_pressed>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	f000 8096 	beq.w	80005c8 <fsm_automode+0x39c>
   			{
   				status_light=MAN_GREEN_2;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <fsm_automode+0x290>)
 800049e:	2207      	movs	r2, #7
 80004a0:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <fsm_automode+0x2a4>)
 80004a4:	f04f 32ff 	mov.w	r2, #4294967295
 80004a8:	601a      	str	r2, [r3, #0]
   				setTimer9(TIME_MANUAL_MODE);
 80004aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ae:	f001 f959 	bl	8001764 <setTimer9>
   				setTimer4(10);
 80004b2:	200a      	movs	r0, #10
 80004b4:	f001 f8ca 	bl	800164c <setTimer4>
   			}
	    break;
 80004b8:	e086      	b.n	80005c8 <fsm_automode+0x39c>
 80004ba:	bf00      	nop
 80004bc:	200000e8 	.word	0x200000e8
 80004c0:	20000010 	.word	0x20000010
 80004c4:	20000014 	.word	0x20000014
 80004c8:	2000012c 	.word	0x2000012c
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	20000004 	.word	0x20000004
 80004d4:	200000ec 	.word	0x200000ec
 80004d8:	200000f0 	.word	0x200000f0
 80004dc:	20000008 	.word	0x20000008
 80004e0:	200000f4 	.word	0x200000f4
 80004e4:	200000f8 	.word	0x200000f8
 80004e8:	200000fc 	.word	0x200000fc
 80004ec:	20000134 	.word	0x20000134
 80004f0:	2000001c 	.word	0x2000001c
 80004f4:	20000018 	.word	0x20000018
	     case  AUTO_YELLOW_2:
	    	   ToggleLEDRed(0);  // RED 1 on
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fd49 	bl	8000f90 <ToggleLEDRed>
               ToggleLEDYellow(1);  // YELLOW 2 on
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fd86 	bl	8001010 <ToggleLEDYellow>
               sendDATA();
 8000504:	f000 fb7a 	bl	8000bfc <sendDATA>
               if(timer1_flag==1 && timer2_flag==1)
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <fsm_automode+0x3a8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d110      	bne.n	8000532 <fsm_automode+0x306>
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <fsm_automode+0x3ac>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10c      	bne.n	8000532 <fsm_automode+0x306>
               {
            	   setTimer1(time_led_green_1);
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <fsm_automode+0x3b0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f001 f841 	bl	80015a4 <setTimer1>
            	   setTimer2(time_led_red_2);
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <fsm_automode+0x3b4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f001 f858 	bl	80015dc <setTimer2>
            	   status_light=AUTO_GREEN_1;
 800052c:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <fsm_automode+0x3b8>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
      			if(is_button_pressed(0))
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fcec 	bl	8000f10 <is_button_pressed>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00d      	beq.n	800055a <fsm_automode+0x32e>
      			{
      				setTimer3(TIME_PEDESTRIAN_LIGHT);  // out pedes state
 800053e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000542:	f001 f867 	bl	8001614 <setTimer3>
      				status_pedes =	PEDES_STOP;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <fsm_automode+0x3bc>)
 8000548:	2209      	movs	r2, #9
 800054a:	601a      	str	r2, [r3, #0]
      				time_buzzer = BUZZER_DUTY_CYCLE;
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <fsm_automode+0x3c0>)
 800054e:	f240 5214 	movw	r2, #1300	; 0x514
 8000552:	601a      	str	r2, [r3, #0]
      				time_frequency = BUZZER_FREQUENCY_START;
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <fsm_automode+0x3c4>)
 8000556:	2232      	movs	r2, #50	; 0x32
 8000558:	601a      	str	r2, [r3, #0]
      			}
           // TODO: implementation fsm_button for TUNNING MODE.
       			if(is_button_pressed(2))  // button 2 is pressed.
 800055a:	2002      	movs	r0, #2
 800055c:	f000 fcd8 	bl	8000f10 <is_button_pressed>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d015      	beq.n	8000592 <fsm_automode+0x366>
       			{
       				status_light=SETTING_LED_RED;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <fsm_automode+0x3b8>)
 8000568:	220b      	movs	r2, #11
 800056a:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <fsm_automode+0x3bc>)
 800056e:	f04f 32ff 	mov.w	r2, #4294967295
 8000572:	601a      	str	r2, [r3, #0]
       				time_setting_red=time_led_red_1;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <fsm_automode+0x3c8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <fsm_automode+0x3cc>)
 800057a:	6013      	str	r3, [r2, #0]
       				time_setting_green=time_led_green_1;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <fsm_automode+0x3b0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <fsm_automode+0x3d0>)
 8000582:	6013      	str	r3, [r2, #0]
       				time_setting_yellow=time_led_yellow_1;
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <fsm_automode+0x3d4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <fsm_automode+0x3d8>)
 800058a:	6013      	str	r3, [r2, #0]
    				setTimer8(12);
 800058c:	200c      	movs	r0, #12
 800058e:	f001 f8cd 	bl	800172c <setTimer8>
       			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
     			if(is_button_pressed(1))  // button 1 is pressed.
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fcbc 	bl	8000f10 <is_button_pressed>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d016      	beq.n	80005cc <fsm_automode+0x3a0>
       			{
       				status_light=MAN_YELLOW_2;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <fsm_automode+0x3b8>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <fsm_automode+0x3bc>)
 80005a6:	f04f 32ff 	mov.w	r2, #4294967295
 80005aa:	601a      	str	r2, [r3, #0]
       				setTimer9(TIME_MANUAL_MODE);
 80005ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b0:	f001 f8d8 	bl	8001764 <setTimer9>
       				setTimer4(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f001 f849 	bl	800164c <setTimer4>
       			}
	    break;
 80005ba:	e007      	b.n	80005cc <fsm_automode+0x3a0>
	     default:
	     break;
 80005bc:	bf00      	nop
 80005be:	e006      	b.n	80005ce <fsm_automode+0x3a2>
	    break;
 80005c0:	bf00      	nop
 80005c2:	e004      	b.n	80005ce <fsm_automode+0x3a2>
	    break;
 80005c4:	bf00      	nop
 80005c6:	e002      	b.n	80005ce <fsm_automode+0x3a2>
	    break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <fsm_automode+0x3a2>
	    break;
 80005cc:	bf00      	nop
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000012c 	.word	0x2000012c
 80005d8:	20000134 	.word	0x20000134
 80005dc:	20000010 	.word	0x20000010
 80005e0:	20000014 	.word	0x20000014
 80005e4:	200000e8 	.word	0x200000e8
 80005e8:	20000004 	.word	0x20000004
 80005ec:	200000ec 	.word	0x200000ec
 80005f0:	200000f0 	.word	0x200000f0
 80005f4:	20000008 	.word	0x20000008
 80005f8:	200000f4 	.word	0x200000f4
 80005fc:	200000f8 	.word	0x200000f8
 8000600:	2000000c 	.word	0x2000000c
 8000604:	200000fc 	.word	0x200000fc

08000608 <fsm_manual_mode>:
 *      Author: Hoang Tri
 */
#include "FSM_MANUALMODE.h"

void fsm_manual_mode()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
     switch(status_light)
 800060c:	4baf      	ldr	r3, [pc, #700]	; (80008cc <fsm_manual_mode+0x2c4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b05      	subs	r3, #5
 8000612:	2b03      	cmp	r3, #3
 8000614:	f200 814e 	bhi.w	80008b4 <fsm_manual_mode+0x2ac>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <fsm_manual_mode+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	080006d3 	.word	0x080006d3
 8000628:	08000775 	.word	0x08000775
 800062c:	08000815 	.word	0x08000815
     {
        case MAN_GREEN_1:
        	// Traffic light 1 is GREEN and traffic light 2 is RED.
       	     ToggleLEDGreen(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fd2d 	bl	8001090 <ToggleLEDGreen>
        	 ToggleLEDRed(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 fcaa 	bl	8000f90 <ToggleLEDRed>

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fc67 	bl	8000f10 <is_button_pressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <fsm_manual_mode+0x4e>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 8000648:	f242 7010 	movw	r0, #10000	; 0x2710
 800064c:	f001 f88a 	bl	8001764 <setTimer9>
        		 status_light=MAN_YELLOW_1;
 8000650:	4b9e      	ldr	r3, [pc, #632]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000652:	2206      	movs	r2, #6
 8000654:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 8000656:	4b9e      	ldr	r3, [pc, #632]	; (80008d0 <fsm_manual_mode+0x2c8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10f      	bne.n	800067e <fsm_manual_mode+0x76>
        	 {
        		 status_light=AUTO_YELLOW_1; //(YELLOW in traffic light 1 on, RED in traffic light 2 on)
 800065e:	4b9b      	ldr	r3, [pc, #620]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000660:	2202      	movs	r2, #2
 8000662:	601a      	str	r2, [r3, #0]
        		 setTimer1(time_led_yellow_1);
 8000664:	4b9b      	ldr	r3, [pc, #620]	; (80008d4 <fsm_manual_mode+0x2cc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 ff9b 	bl	80015a4 <setTimer1>
           		 setTimer2(time_led_yellow_1);
 800066e:	4b99      	ldr	r3, [pc, #612]	; (80008d4 <fsm_manual_mode+0x2cc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ffb2 	bl	80015dc <setTimer2>
           		 setTimer4(10);
 8000678:	200a      	movs	r0, #10
 800067a:	f000 ffe7 	bl	800164c <setTimer4>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_GREEN_1 => AUTO_YELLOW_1_)
        	 if(is_button_pressed(3))  // button 3 is Pressed.
 800067e:	2003      	movs	r0, #3
 8000680:	f000 fc46 	bl	8000f10 <is_button_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00f      	beq.n	80006aa <fsm_manual_mode+0xa2>
        	 {
        		 status_light=AUTO_YELLOW_1; //(YELLOW in traffic light 1 on, RED in traffic light 2 on)
 800068a:	4b90      	ldr	r3, [pc, #576]	; (80008cc <fsm_manual_mode+0x2c4>)
 800068c:	2202      	movs	r2, #2
 800068e:	601a      	str	r2, [r3, #0]
        		 setTimer1(time_led_yellow_1);
 8000690:	4b90      	ldr	r3, [pc, #576]	; (80008d4 <fsm_manual_mode+0x2cc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff85 	bl	80015a4 <setTimer1>
           		 setTimer2(time_led_yellow_1);
 800069a:	4b8e      	ldr	r3, [pc, #568]	; (80008d4 <fsm_manual_mode+0x2cc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff9c 	bl	80015dc <setTimer2>
           		 setTimer4(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 ffd1 	bl	800164c <setTimer4>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(2))  // button 2 is holded 1s.
 80006aa:	2002      	movs	r0, #2
 80006ac:	f000 fc50 	bl	8000f50 <is_button_pressed_1s>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <fsm_manual_mode+0xb4>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80006b6:	4b85      	ldr	r3, [pc, #532]	; (80008cc <fsm_manual_mode+0x2c4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
        	 }
        	 if(is_button_pressed(2))  // button 2 is holded 1s.
 80006bc:	2002      	movs	r0, #2
 80006be:	f000 fc27 	bl	8000f10 <is_button_pressed>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f000 80f7 	beq.w	80008b8 <fsm_manual_mode+0x2b0>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80006ca:	4b80      	ldr	r3, [pc, #512]	; (80008cc <fsm_manual_mode+0x2c4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
        	 }
        	 break;
 80006d0:	e0f2      	b.n	80008b8 <fsm_manual_mode+0x2b0>


        case MAN_YELLOW_1:
        	// Traffic light 1 is YELLOW and traffic light 2 is RED.
       	     ToggleLEDYellow(0);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fc9c 	bl	8001010 <ToggleLEDYellow>
        	 ToggleLEDRed(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fc59 	bl	8000f90 <ToggleLEDRed>

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fc16 	bl	8000f10 <is_button_pressed>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <fsm_manual_mode+0xf0>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 80006ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80006ee:	f001 f839 	bl	8001764 <setTimer9>
        		 status_light=MAN_GREEN_2;
 80006f2:	4b76      	ldr	r3, [pc, #472]	; (80008cc <fsm_manual_mode+0x2c4>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 80006f8:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <fsm_manual_mode+0x2c8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10f      	bne.n	8000720 <fsm_manual_mode+0x118>
        	 {
        		 status_light=AUTO_GREEN_2; //(RED in traffic light 1 on, GREEN in traffic light 2 on)
 8000700:	4b72      	ldr	r3, [pc, #456]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000702:	2203      	movs	r2, #3
 8000704:	601a      	str	r2, [r3, #0]
        		 setTimer2(time_led_green_2);
 8000706:	4b74      	ldr	r3, [pc, #464]	; (80008d8 <fsm_manual_mode+0x2d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 ff66 	bl	80015dc <setTimer2>
        		 setTimer1(time_led_red_1);
 8000710:	4b72      	ldr	r3, [pc, #456]	; (80008dc <fsm_manual_mode+0x2d4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 ff45 	bl	80015a4 <setTimer1>
           		 setTimer4(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 ff96 	bl	800164c <setTimer4>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_YELLOW_1 => AUTO_GREEN_2)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 8000720:	2003      	movs	r0, #3
 8000722:	f000 fbf5 	bl	8000f10 <is_button_pressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00f      	beq.n	800074c <fsm_manual_mode+0x144>
        	 {
        		 status_light=AUTO_GREEN_2; //(RED in traffic light 1 on, GREEN in traffic light 2 on)
 800072c:	4b67      	ldr	r3, [pc, #412]	; (80008cc <fsm_manual_mode+0x2c4>)
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
        		 setTimer2(time_led_green_2);
 8000732:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <fsm_manual_mode+0x2d0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 ff50 	bl	80015dc <setTimer2>
        		 setTimer1(time_led_red_1);
 800073c:	4b67      	ldr	r3, [pc, #412]	; (80008dc <fsm_manual_mode+0x2d4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 ff2f 	bl	80015a4 <setTimer1>
           		 setTimer4(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f000 ff80 	bl	800164c <setTimer4>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(2))  // button 3 is holded 1s.
 800074c:	2002      	movs	r0, #2
 800074e:	f000 fbff 	bl	8000f50 <is_button_pressed_1s>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <fsm_manual_mode+0x156>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 8000758:	4b5c      	ldr	r3, [pc, #368]	; (80008cc <fsm_manual_mode+0x2c4>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
        	 }
        	 if(is_button_pressed(2))  // button 2 is holded 1s.
 800075e:	2002      	movs	r0, #2
 8000760:	f000 fbd6 	bl	8000f10 <is_button_pressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 80a8 	beq.w	80008bc <fsm_manual_mode+0x2b4>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800076c:	4b57      	ldr	r3, [pc, #348]	; (80008cc <fsm_manual_mode+0x2c4>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
        	 }
        	 break;
 8000772:	e0a3      	b.n	80008bc <fsm_manual_mode+0x2b4>

        case MAN_GREEN_2:
        	// Traffic light 1 is RED and traffic light 2 is GREEN.
       	     ToggleLEDRed(0);
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fc0b 	bl	8000f90 <ToggleLEDRed>
        	 ToggleLEDGreen(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fc88 	bl	8001090 <ToggleLEDGreen>
       // 	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fbc5 	bl	8000f10 <is_button_pressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <fsm_manual_mode+0x192>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 800078c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000790:	f000 ffe8 	bl	8001764 <setTimer9>
        		 status_light=MAN_YELLOW_2;
 8000794:	4b4d      	ldr	r3, [pc, #308]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000796:	2208      	movs	r2, #8
 8000798:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 800079a:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <fsm_manual_mode+0x2c8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10f      	bne.n	80007c2 <fsm_manual_mode+0x1ba>
        	 {
        		 status_light=AUTO_YELLOW_2; //(RED in traffic light 1 on, YELLOW in traffic light 2 on)
 80007a2:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <fsm_manual_mode+0x2c4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	601a      	str	r2, [r3, #0]
        		 setTimer1(time_led_yellow_2);
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <fsm_manual_mode+0x2d8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fef9 	bl	80015a4 <setTimer1>
        		 setTimer2(time_led_yellow_2);
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <fsm_manual_mode+0x2d8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ff10 	bl	80015dc <setTimer2>
           		 setTimer4(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 ff45 	bl	800164c <setTimer4>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_GREEN_2 => AUTO_YELLOW_2)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 80007c2:	2003      	movs	r0, #3
 80007c4:	f000 fba4 	bl	8000f10 <is_button_pressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00f      	beq.n	80007ee <fsm_manual_mode+0x1e6>
        	 {
        		 status_light=AUTO_YELLOW_2; //(RED in traffic light 1 on, YELLOW in traffic light 2 on)
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <fsm_manual_mode+0x2c4>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	601a      	str	r2, [r3, #0]
        		 setTimer1(time_led_yellow_2);
 80007d4:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <fsm_manual_mode+0x2d8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fee3 	bl	80015a4 <setTimer1>
        		 setTimer2(time_led_yellow_2);
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <fsm_manual_mode+0x2d8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fefa 	bl	80015dc <setTimer2>
           		 setTimer4(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f000 ff2f 	bl	800164c <setTimer4>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(2))  // button 1 is holded 1s.
 80007ee:	2002      	movs	r0, #2
 80007f0:	f000 fbae 	bl	8000f50 <is_button_pressed_1s>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <fsm_manual_mode+0x1f8>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <fsm_manual_mode+0x2c4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
        	 }
        	 if(is_button_pressed(2))  // button 2 is holded 1s.
 8000800:	2002      	movs	r0, #2
 8000802:	f000 fb85 	bl	8000f10 <is_button_pressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d059      	beq.n	80008c0 <fsm_manual_mode+0x2b8>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <fsm_manual_mode+0x2c4>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
        	 }
        	 break;
 8000812:	e055      	b.n	80008c0 <fsm_manual_mode+0x2b8>

        case MAN_YELLOW_2:
        	// Traffic light 1 is RED and traffic light 2 is YELLOW.
       	     ToggleLEDRed(0);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fbbb 	bl	8000f90 <ToggleLEDRed>
        	 ToggleLEDYellow(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fbf8 	bl	8001010 <ToggleLEDYellow>
      //  	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fb75 	bl	8000f10 <is_button_pressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <fsm_manual_mode+0x232>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 800082c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000830:	f000 ff98 	bl	8001764 <setTimer9>
        		 status_light=MAN_GREEN_1;
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000836:	2205      	movs	r2, #5
 8000838:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <fsm_manual_mode+0x2c8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10f      	bne.n	8000862 <fsm_manual_mode+0x25a>
        	 {
        		 status_light=AUTO_GREEN_1; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
        		 setTimer2(time_led_red_2);
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <fsm_manual_mode+0x2dc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fec5 	bl	80015dc <setTimer2>
        		 setTimer1(time_led_green_1);
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <fsm_manual_mode+0x2e0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fea4 	bl	80015a4 <setTimer1>
           		 setTimer4(10);
 800085c:	200a      	movs	r0, #10
 800085e:	f000 fef5 	bl	800164c <setTimer4>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_YELLOW_2 => AUTO_GREEN_1)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 8000862:	2003      	movs	r0, #3
 8000864:	f000 fb54 	bl	8000f10 <is_button_pressed>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00f      	beq.n	800088e <fsm_manual_mode+0x286>
        	 {
        		 status_light=AUTO_GREEN_1; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <fsm_manual_mode+0x2c4>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
        		 setTimer2(time_led_red_2);
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <fsm_manual_mode+0x2dc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 feaf 	bl	80015dc <setTimer2>
        		 setTimer1(time_led_green_1);
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <fsm_manual_mode+0x2e0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fe8e 	bl	80015a4 <setTimer1>
           		 setTimer4(10);
 8000888:	200a      	movs	r0, #10
 800088a:	f000 fedf 	bl	800164c <setTimer4>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(2))  // button 1 is holded 1s.
 800088e:	2002      	movs	r0, #2
 8000890:	f000 fb5e 	bl	8000f50 <is_button_pressed_1s>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <fsm_manual_mode+0x298>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <fsm_manual_mode+0x2c4>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
        	 }
        	 if(is_button_pressed(2))  // button 2 is pressed 1s.
 80008a0:	2002      	movs	r0, #2
 80008a2:	f000 fb35 	bl	8000f10 <is_button_pressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00b      	beq.n	80008c4 <fsm_manual_mode+0x2bc>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <fsm_manual_mode+0x2c4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
        	 }
        	 break;
 80008b2:	e007      	b.n	80008c4 <fsm_manual_mode+0x2bc>
        default:
        	break;
 80008b4:	bf00      	nop
 80008b6:	e006      	b.n	80008c6 <fsm_manual_mode+0x2be>
        	 break;
 80008b8:	bf00      	nop
 80008ba:	e004      	b.n	80008c6 <fsm_manual_mode+0x2be>
        	 break;
 80008bc:	bf00      	nop
 80008be:	e002      	b.n	80008c6 <fsm_manual_mode+0x2be>
        	 break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <fsm_manual_mode+0x2be>
        	 break;
 80008c4:	bf00      	nop
     }
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e8 	.word	0x200000e8
 80008d0:	2000016c 	.word	0x2000016c
 80008d4:	2000000c 	.word	0x2000000c
 80008d8:	2000001c 	.word	0x2000001c
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000018 	.word	0x20000018
 80008e4:	20000014 	.word	0x20000014
 80008e8:	20000010 	.word	0x20000010

080008ec <fsm_pedes_mode>:
//		break;
//	}
//
//}
void fsm_pedes_mode()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	// Pedestrian light is located in traffic light 2
	switch(status_pedes)
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <fsm_pedes_mode+0xa8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	d01e      	beq.n	8000936 <fsm_pedes_mode+0x4a>
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	d137      	bne.n	800096c <fsm_pedes_mode+0x80>
	{
	   case PEDES_GO:
		   ToggleLEDPedestrian(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fc07 	bl	8001110 <ToggleLEDPedestrian>
		   Buzzer_RUN();
 8000902:	f7ff fc23 	bl	800014c <Buzzer_RUN>
		  * Nguoi di bo se duoc di khi den giao thong la den do.
		  * Traffic Light 1: LED GREEN/YELLOW ON.
		  * Traffic Light 2: LED RED ON.
		  * */
		   // TODO: implementation function to turn off pedestrian light.
		   if(timer3_flag==1)  // count to exit pedes mode.
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <fsm_pedes_mode+0xac>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <fsm_pedes_mode+0x2a>
		   {
			   status_pedes=PEDES_OUTOFSTATE;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <fsm_pedes_mode+0xa8>)
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	601a      	str	r2, [r3, #0]
		   }
		  if(status_light==AUTO_GREEN_2||status_light==AUTO_YELLOW_2)
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <fsm_pedes_mode+0xb0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d003      	beq.n	8000926 <fsm_pedes_mode+0x3a>
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <fsm_pedes_mode+0xb0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d130      	bne.n	8000988 <fsm_pedes_mode+0x9c>
			  /*
			   * AUTO_GREEN_2: RED1 ON, GREEN 2 ON.
			   * AUTO_YELLOW_2: RED1 ON, YELLOW 2 ON.
			   * Pedes light in traffic light 2 => pedestrian can't through road
			   */
			  status_pedes=PEDES_STOP;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <fsm_pedes_mode+0xa8>)
 8000928:	2209      	movs	r2, #9
 800092a:	601a      	str	r2, [r3, #0]
			   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <fsm_pedes_mode+0xb4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
		  }
	   break;
 8000934:	e028      	b.n	8000988 <fsm_pedes_mode+0x9c>


	   case PEDES_STOP:
		   ToggleLEDPedestrian(0); // LED RED ON
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fbea 	bl	8001110 <ToggleLEDPedestrian>
		  if(status_light==AUTO_GREEN_1||status_light==AUTO_YELLOW_1)
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <fsm_pedes_mode+0xb0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d003      	beq.n	800094c <fsm_pedes_mode+0x60>
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <fsm_pedes_mode+0xb0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d106      	bne.n	800095a <fsm_pedes_mode+0x6e>
				  /*
				   * AUTO_GREEN_1: GREEN1 ON, RED 2 ON.
				   * AUTO_YELLOW_1: YELLOW1 ON, RED 2 ON.
				   *  Pedes light in traffic light 2 => pedestrian can through road.
				   */
			    status_pedes=PEDES_GO;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <fsm_pedes_mode+0xa8>)
 800094e:	220a      	movs	r2, #10
 8000950:	601a      	str	r2, [r3, #0]
			    setTimer5(BUZZER_DUTY_CYCLE);  // counter to turn on buzzer.
 8000952:	f240 5014 	movw	r0, #1300	; 0x514
 8000956:	f000 fe95 	bl	8001684 <setTimer5>
			  }
		   // TODO: implementation function to turn off pedestrian light and out pedes mode.
		   if(timer3_flag==1)
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <fsm_pedes_mode+0xac>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d114      	bne.n	800098c <fsm_pedes_mode+0xa0>
		   {
			   status_pedes=PEDES_OUTOFSTATE;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <fsm_pedes_mode+0xa8>)
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	601a      	str	r2, [r3, #0]
		   }
		   // TODO: Implementation for function of fsm_button to out pedes mode.

	   break;
 800096a:	e00f      	b.n	800098c <fsm_pedes_mode+0xa0>

	   default:
		   ToggleLEDPedestrian(2);             // default state.
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fbcf 	bl	8001110 <ToggleLEDPedestrian>
		   time_buzzer=0;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <fsm_pedes_mode+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
		   time_frequency=0;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <fsm_pedes_mode+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
		   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <fsm_pedes_mode+0xb4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
	   break;
 8000986:	e002      	b.n	800098e <fsm_pedes_mode+0xa2>
	   break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <fsm_pedes_mode+0xa2>
	   break;
 800098c:	bf00      	nop
	}
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000004 	.word	0x20000004
 8000998:	2000013c 	.word	0x2000013c
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	2000017c 	.word	0x2000017c
 80009a4:	200000ec 	.word	0x200000ec
 80009a8:	200000f0 	.word	0x200000f0

080009ac <fsm_tunning_mode>:
 *      Author: Hoang Tri
 */

#include "FSM_SETTINGMODE.h"
void fsm_tunning_mode()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	 *  Inscrese value of led.
	 *  Descrease value of led.
	 *  change tunning mode.
	 *  Out tuning mode to AUTO_INIT state.
	 * */
     switch(status_light)
 80009b0:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <fsm_tunning_mode+0x220>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b0d      	cmp	r3, #13
 80009b6:	d053      	beq.n	8000a60 <fsm_tunning_mode+0xb4>
 80009b8:	2b0d      	cmp	r3, #13
 80009ba:	f300 80fd 	bgt.w	8000bb8 <fsm_tunning_mode+0x20c>
 80009be:	2b0b      	cmp	r3, #11
 80009c0:	d003      	beq.n	80009ca <fsm_tunning_mode+0x1e>
 80009c2:	2b0c      	cmp	r3, #12
 80009c4:	f000 8096 	beq.w	8000af4 <fsm_tunning_mode+0x148>
           	  setTimer8(12);
             }
            break;

         default:
        	 break;
 80009c8:	e0f6      	b.n	8000bb8 <fsm_tunning_mode+0x20c>
              if(is_button_pressed(2))
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 faa0 	bl	8000f10 <is_button_pressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <fsm_tunning_mode+0x3a>
            	  time_setting_red=time_setting_red+1000;  // 10s => 11s
 80009d6:	4b7e      	ldr	r3, [pc, #504]	; (8000bd0 <fsm_tunning_mode+0x224>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009de:	4a7c      	ldr	r2, [pc, #496]	; (8000bd0 <fsm_tunning_mode+0x224>)
 80009e0:	6013      	str	r3, [r2, #0]
            	  sendVALUE_SETTING();
 80009e2:	f000 f97b 	bl	8000cdc <sendVALUE_SETTING>
              if(is_button_pressed(3))
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 fa92 	bl	8000f10 <is_button_pressed>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <fsm_tunning_mode+0x56>
            	  time_setting_red=time_setting_red-1000;
 80009f2:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <fsm_tunning_mode+0x224>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80009fa:	4a75      	ldr	r2, [pc, #468]	; (8000bd0 <fsm_tunning_mode+0x224>)
 80009fc:	6013      	str	r3, [r2, #0]
            	  sendVALUE_SETTING();
 80009fe:	f000 f96d 	bl	8000cdc <sendVALUE_SETTING>
              time_led_red_1=time_setting_red;
 8000a02:	4b73      	ldr	r3, [pc, #460]	; (8000bd0 <fsm_tunning_mode+0x224>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a73      	ldr	r2, [pc, #460]	; (8000bd4 <fsm_tunning_mode+0x228>)
 8000a08:	6013      	str	r3, [r2, #0]
              time_led_red_2=time_setting_red;
 8000a0a:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <fsm_tunning_mode+0x224>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a72      	ldr	r2, [pc, #456]	; (8000bd8 <fsm_tunning_mode+0x22c>)
 8000a10:	6013      	str	r3, [r2, #0]
              if(timer8_flag==1)
 8000a12:	4b72      	ldr	r3, [pc, #456]	; (8000bdc <fsm_tunning_mode+0x230>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d10d      	bne.n	8000a36 <fsm_tunning_mode+0x8a>
            	  ToggleLEDRed(0);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 fab8 	bl	8000f90 <ToggleLEDRed>
            	  ToggleLEDRed(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fab5 	bl	8000f90 <ToggleLEDRed>
            	  setTimer7(500); //0.5s
 8000a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2a:	f000 fe63 	bl	80016f4 <setTimer7>
            	  setTimer8(1000);//1s
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f000 fe7b 	bl	800172c <setTimer8>
              if(timer7_flag==1)
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <fsm_tunning_mode+0x234>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <fsm_tunning_mode+0x98>
            	  ToggleLEDRed(2);  // default case
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f000 faa6 	bl	8000f90 <ToggleLEDRed>
              if(is_button_pressed(1))
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fa63 	bl	8000f10 <is_button_pressed>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80b5 	beq.w	8000bbc <fsm_tunning_mode+0x210>
            	  status_light=SETTING_LED_GREEN;
 8000a52:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <fsm_tunning_mode+0x220>)
 8000a54:	220d      	movs	r2, #13
 8000a56:	601a      	str	r2, [r3, #0]
            	  setTimer8(12);
 8000a58:	200c      	movs	r0, #12
 8000a5a:	f000 fe67 	bl	800172c <setTimer8>
         break;
 8000a5e:	e0ad      	b.n	8000bbc <fsm_tunning_mode+0x210>
             if(is_button_pressed(2))
 8000a60:	2002      	movs	r0, #2
 8000a62:	f000 fa55 	bl	8000f10 <is_button_pressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <fsm_tunning_mode+0xd0>
           	  time_setting_green=time_setting_green+1000;
 8000a6c:	4b5d      	ldr	r3, [pc, #372]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a74:	4a5b      	ldr	r2, [pc, #364]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000a76:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000a78:	f000 f930 	bl	8000cdc <sendVALUE_SETTING>
             if(is_button_pressed(3))
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 fa47 	bl	8000f10 <is_button_pressed>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <fsm_tunning_mode+0xec>
           	  time_setting_green=time_setting_green-1000;
 8000a88:	4b56      	ldr	r3, [pc, #344]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000a90:	4a54      	ldr	r2, [pc, #336]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000a92:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000a94:	f000 f922 	bl	8000cdc <sendVALUE_SETTING>
             time_led_green_1=time_setting_green;
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <fsm_tunning_mode+0x23c>)
 8000a9e:	6013      	str	r3, [r2, #0]
             time_led_green_2=time_setting_green;
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a51      	ldr	r2, [pc, #324]	; (8000bec <fsm_tunning_mode+0x240>)
 8000aa6:	6013      	str	r3, [r2, #0]
             if(timer8_flag==1)
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <fsm_tunning_mode+0x230>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10d      	bne.n	8000acc <fsm_tunning_mode+0x120>
           	  ToggleLEDGreen(0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 faed 	bl	8001090 <ToggleLEDGreen>
           	  ToggleLEDGreen(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 faea 	bl	8001090 <ToggleLEDGreen>
           	  setTimer7(500); //0.5s
 8000abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac0:	f000 fe18 	bl	80016f4 <setTimer7>
           	  setTimer8(1000);//1s
 8000ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac8:	f000 fe30 	bl	800172c <setTimer8>
             if(timer7_flag==1)
 8000acc:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <fsm_tunning_mode+0x234>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d102      	bne.n	8000ada <fsm_tunning_mode+0x12e>
           	  ToggleLEDGreen(2);  // default case
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f000 fadb 	bl	8001090 <ToggleLEDGreen>
             if(is_button_pressed(1))
 8000ada:	2001      	movs	r0, #1
 8000adc:	f000 fa18 	bl	8000f10 <is_button_pressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d06c      	beq.n	8000bc0 <fsm_tunning_mode+0x214>
           	  status_light=SETTING_LED_YELLOW;
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <fsm_tunning_mode+0x220>)
 8000ae8:	220c      	movs	r2, #12
 8000aea:	601a      	str	r2, [r3, #0]
           	  setTimer8(12);
 8000aec:	200c      	movs	r0, #12
 8000aee:	f000 fe1d 	bl	800172c <setTimer8>
         break;
 8000af2:	e065      	b.n	8000bc0 <fsm_tunning_mode+0x214>
             if(is_button_pressed(2))
 8000af4:	2002      	movs	r0, #2
 8000af6:	f000 fa0b 	bl	8000f10 <is_button_pressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d007      	beq.n	8000b10 <fsm_tunning_mode+0x164>
           	  time_setting_yellow=time_setting_yellow+1000;
 8000b00:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b08:	4a39      	ldr	r2, [pc, #228]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b0a:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000b0c:	f000 f8e6 	bl	8000cdc <sendVALUE_SETTING>
             if(is_button_pressed(3))
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f9fd 	bl	8000f10 <is_button_pressed>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d007      	beq.n	8000b2c <fsm_tunning_mode+0x180>
           	  time_setting_yellow=time_setting_yellow-1000;
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b26:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000b28:	f000 f8d8 	bl	8000cdc <sendVALUE_SETTING>
             time_led_yellow_1=time_setting_yellow;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a30      	ldr	r2, [pc, #192]	; (8000bf4 <fsm_tunning_mode+0x248>)
 8000b32:	6013      	str	r3, [r2, #0]
             time_led_yellow_2=time_setting_yellow;
 8000b34:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2f      	ldr	r2, [pc, #188]	; (8000bf8 <fsm_tunning_mode+0x24c>)
 8000b3a:	6013      	str	r3, [r2, #0]
             if(timer8_flag==1)
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <fsm_tunning_mode+0x230>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10d      	bne.n	8000b60 <fsm_tunning_mode+0x1b4>
           	  ToggleLEDYellow(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 fa63 	bl	8001010 <ToggleLEDYellow>
           	  ToggleLEDYellow(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fa60 	bl	8001010 <ToggleLEDYellow>
           	  setTimer7(500); //0.5s
 8000b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b54:	f000 fdce 	bl	80016f4 <setTimer7>
           	  setTimer8(1000);//1s
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	f000 fde6 	bl	800172c <setTimer8>
             if(timer7_flag==1)
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <fsm_tunning_mode+0x234>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d102      	bne.n	8000b6e <fsm_tunning_mode+0x1c2>
           	  ToggleLEDYellow(2);  // default case
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 fa51 	bl	8001010 <ToggleLEDYellow>
             if(is_button_pressed(1))
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 f9ce 	bl	8000f10 <is_button_pressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d024      	beq.n	8000bc4 <fsm_tunning_mode+0x218>
                 time_led_yellow_1=time_setting_yellow;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <fsm_tunning_mode+0x248>)
 8000b80:	6013      	str	r3, [r2, #0]
                 time_led_yellow_2=time_setting_yellow;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <fsm_tunning_mode+0x244>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <fsm_tunning_mode+0x24c>)
 8000b88:	6013      	str	r3, [r2, #0]
                 time_led_green_1=time_setting_green;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <fsm_tunning_mode+0x23c>)
 8000b90:	6013      	str	r3, [r2, #0]
                 time_led_green_2=time_setting_green;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <fsm_tunning_mode+0x238>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <fsm_tunning_mode+0x240>)
 8000b98:	6013      	str	r3, [r2, #0]
                 time_led_red_1=time_setting_red;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <fsm_tunning_mode+0x224>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <fsm_tunning_mode+0x228>)
 8000ba0:	6013      	str	r3, [r2, #0]
                 time_led_red_2=time_setting_red;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <fsm_tunning_mode+0x224>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <fsm_tunning_mode+0x22c>)
 8000ba8:	6013      	str	r3, [r2, #0]
           	  status_light=AUTO_INIT;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <fsm_tunning_mode+0x220>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
           	  setTimer8(12);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f000 fdbb 	bl	800172c <setTimer8>
            break;
 8000bb6:	e005      	b.n	8000bc4 <fsm_tunning_mode+0x218>
        	 break;
 8000bb8:	bf00      	nop
 8000bba:	e004      	b.n	8000bc6 <fsm_tunning_mode+0x21a>
         break;
 8000bbc:	bf00      	nop
 8000bbe:	e002      	b.n	8000bc6 <fsm_tunning_mode+0x21a>
         break;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <fsm_tunning_mode+0x21a>
            break;
 8000bc4:	bf00      	nop
     }
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000e8 	.word	0x200000e8
 8000bd0:	200000f4 	.word	0x200000f4
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	2000015c 	.word	0x2000015c
 8000be4:	200000f8 	.word	0x200000f8
 8000be8:	20000010 	.word	0x20000010
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	200000fc 	.word	0x200000fc
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	20000018 	.word	0x20000018

08000bfc <sendDATA>:
 *  Created on: Dec 13, 2022
 *      Author: Hoang Tri
 */
#include "UART_Communication.h"
// setting UART and Buzzer for traffic light system
void sendDATA(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	if(timer4_flag)
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <sendDATA+0xb0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d04f      	beq.n	8000ca8 <sendDATA+0xac>
	{
			if(!timer1_flag)
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <sendDATA+0xb4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d115      	bne.n	8000c3c <sendDATA+0x40>
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:%d:TFLIGHT1#\r\n", timer1_counter/100), 1000);
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <sendDATA+0xb8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <sendDATA+0xbc>)
 8000c16:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1a:	1152      	asrs	r2, r2, #5
 8000c1c:	17db      	asrs	r3, r3, #31
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	4926      	ldr	r1, [pc, #152]	; (8000cbc <sendDATA+0xc0>)
 8000c24:	4826      	ldr	r0, [pc, #152]	; (8000cc0 <sendDATA+0xc4>)
 8000c26:	f003 fc55 	bl	80044d4 <siprintf>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	4923      	ldr	r1, [pc, #140]	; (8000cc0 <sendDATA+0xc4>)
 8000c34:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <sendDATA+0xc8>)
 8000c36:	f002 ff90 	bl	8003b5a <HAL_UART_Transmit>
 8000c3a:	e00b      	b.n	8000c54 <sendDATA+0x58>
			}
			else
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:WAIT:TFLIGHT1#\r\n"), 1000);
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <sendDATA+0xcc>)
 8000c3e:	4820      	ldr	r0, [pc, #128]	; (8000cc0 <sendDATA+0xc4>)
 8000c40:	f003 fc48 	bl	80044d4 <siprintf>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	491c      	ldr	r1, [pc, #112]	; (8000cc0 <sendDATA+0xc4>)
 8000c4e:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <sendDATA+0xc8>)
 8000c50:	f002 ff83 	bl	8003b5a <HAL_UART_Transmit>
			}

			if(!timer2_flag)
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <sendDATA+0xd0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d115      	bne.n	8000c88 <sendDATA+0x8c>
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:%d:TFLIGHT2#\r\n", timer2_counter/100), 1000);
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <sendDATA+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <sendDATA+0xbc>)
 8000c62:	fb82 1203 	smull	r1, r2, r2, r3
 8000c66:	1152      	asrs	r2, r2, #5
 8000c68:	17db      	asrs	r3, r3, #31
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4919      	ldr	r1, [pc, #100]	; (8000cd4 <sendDATA+0xd8>)
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <sendDATA+0xc4>)
 8000c72:	f003 fc2f 	bl	80044d4 <siprintf>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	4910      	ldr	r1, [pc, #64]	; (8000cc0 <sendDATA+0xc4>)
 8000c80:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <sendDATA+0xc8>)
 8000c82:	f002 ff6a 	bl	8003b5a <HAL_UART_Transmit>
 8000c86:	e00b      	b.n	8000ca0 <sendDATA+0xa4>
			}
			else
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:WAIT:TFLIGHT2#\r\n"), 1000);
 8000c88:	4913      	ldr	r1, [pc, #76]	; (8000cd8 <sendDATA+0xdc>)
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <sendDATA+0xc4>)
 8000c8c:	f003 fc22 	bl	80044d4 <siprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c98:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <sendDATA+0xc4>)
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <sendDATA+0xc8>)
 8000c9c:	f002 ff5d 	bl	8003b5a <HAL_UART_Transmit>
			}
			setTimer4(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 fcd2 	bl	800164c <setTimer4>
		}
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000144 	.word	0x20000144
 8000cb0:	2000012c 	.word	0x2000012c
 8000cb4:	20000128 	.word	0x20000128
 8000cb8:	51eb851f 	.word	0x51eb851f
 8000cbc:	08004d60 	.word	0x08004d60
 8000cc0:	20000100 	.word	0x20000100
 8000cc4:	2000020c 	.word	0x2000020c
 8000cc8:	08004d78 	.word	0x08004d78
 8000ccc:	20000134 	.word	0x20000134
 8000cd0:	20000130 	.word	0x20000130
 8000cd4:	08004d90 	.word	0x08004d90
 8000cd8:	08004da8 	.word	0x08004da8

08000cdc <sendVALUE_SETTING>:

void sendVALUE_SETTING()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af02      	add	r7, sp, #8
	HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!RED:%d:YELLOW:%d:GREEN:%d#\r\n", time_setting_red/1000, time_setting_yellow/1000, time_setting_green/1000), 1000);
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <sendVALUE_SETTING+0x5c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <sendVALUE_SETTING+0x60>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1192      	asrs	r2, r2, #6
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad1      	subs	r1, r2, r3
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <sendVALUE_SETTING+0x64>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <sendVALUE_SETTING+0x60>)
 8000cf8:	fb82 0203 	smull	r0, r2, r2, r3
 8000cfc:	1192      	asrs	r2, r2, #6
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	1ad0      	subs	r0, r2, r3
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <sendVALUE_SETTING+0x68>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <sendVALUE_SETTING+0x60>)
 8000d08:	fb82 c203 	smull	ip, r2, r2, r3
 8000d0c:	1192      	asrs	r2, r2, #6
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4603      	mov	r3, r0
 8000d16:	460a      	mov	r2, r1
 8000d18:	490b      	ldr	r1, [pc, #44]	; (8000d48 <sendVALUE_SETTING+0x6c>)
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <sendVALUE_SETTING+0x70>)
 8000d1c:	f003 fbda 	bl	80044d4 <siprintf>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d28:	4908      	ldr	r1, [pc, #32]	; (8000d4c <sendVALUE_SETTING+0x70>)
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <sendVALUE_SETTING+0x74>)
 8000d2c:	f002 ff15 	bl	8003b5a <HAL_UART_Transmit>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000f4 	.word	0x200000f4
 8000d3c:	10624dd3 	.word	0x10624dd3
 8000d40:	200000fc 	.word	0x200000fc
 8000d44:	200000f8 	.word	0x200000f8
 8000d48:	08004dc0 	.word	0x08004dc0
 8000d4c:	20000100 	.word	0x20000100
 8000d50:	2000020c 	.word	0x2000020c

08000d54 <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d822      	bhi.n	8000da8 <iKeyInput+0x54>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <iKeyInput+0x14>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000d9d 	.word	0x08000d9d
	switch(index){
	case 0:  // Button of  Pedestrian Light
		return HAL_GPIO_ReadPin(Button_Pedes_GPIO_Port, Button_Pedes_Pin);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <iKeyInput+0x60>)
 8000d7c:	f001 faf8 	bl	8002370 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	e012      	b.n	8000daa <iKeyInput+0x56>
	case 1:  // Button 1
		return HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8000d84:	2102      	movs	r1, #2
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <iKeyInput+0x60>)
 8000d88:	f001 faf2 	bl	8002370 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	e00c      	b.n	8000daa <iKeyInput+0x56>
	case 2:  // Button 2
		return HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8000d90:	2110      	movs	r1, #16
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <iKeyInput+0x60>)
 8000d94:	f001 faec 	bl	8002370 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	e006      	b.n	8000daa <iKeyInput+0x56>
	case 3:  // Button 3
		return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <iKeyInput+0x64>)
 8000da0:	f001 fae6 	bl	8002370 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	e000      	b.n	8000daa <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 8000da8:	2301      	movs	r3, #1
	}
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <subKeyProcess1>:

void subKeyProcess1(int index){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <subKeyProcess1+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	200000b8 	.word	0x200000b8

08000ddc <subKeyProcess2>:

void subKeyProcess2(int index){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <subKeyProcess2+0x1c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2101      	movs	r1, #1
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200000c8 	.word	0x200000c8

08000dfc <getKeyInput>:

void getKeyInput(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e071      	b.n	8000eec <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000e08:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <getKeyInput+0x100>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	7819      	ldrb	r1, [r3, #0]
 8000e10:	4a3b      	ldr	r2, [pc, #236]	; (8000f00 <getKeyInput+0x104>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	460a      	mov	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000e1a:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <getKeyInput+0x108>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	7819      	ldrb	r1, [r3, #0]
 8000e22:	4a36      	ldr	r2, [pc, #216]	; (8000efc <getKeyInput+0x100>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	460a      	mov	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff91 	bl	8000d54 <iKeyInput>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4a33      	ldr	r2, [pc, #204]	; (8000f04 <getKeyInput+0x108>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <getKeyInput+0x104>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	492c      	ldr	r1, [pc, #176]	; (8000efc <getKeyInput+0x100>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d148      	bne.n	8000ee6 <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 8000e54:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <getKeyInput+0x108>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	4927      	ldr	r1, [pc, #156]	; (8000efc <getKeyInput+0x100>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	440b      	add	r3, r1
 8000e62:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d13e      	bne.n	8000ee6 <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <getKeyInput+0x10c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	4923      	ldr	r1, [pc, #140]	; (8000f00 <getKeyInput+0x104>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	440b      	add	r3, r1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d017      	beq.n	8000eac <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <getKeyInput+0x104>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	7819      	ldrb	r1, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <getKeyInput+0x10c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <getKeyInput+0x104>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d125      	bne.n	8000ee6 <getKeyInput+0xea>
					subKeyProcess1(i);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff8e 	bl	8000dbc <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <getKeyInput+0x110>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2164      	movs	r1, #100	; 0x64
 8000ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000eaa:	e01c      	b.n	8000ee6 <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <getKeyInput+0x110>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	4915      	ldr	r1, [pc, #84]	; (8000f0c <getKeyInput+0x110>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <getKeyInput+0x110>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dc0d      	bgt.n	8000ee6 <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <getKeyInput+0x104>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <getKeyInput+0xe0>
						subKeyProcess2(i);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff80 	bl	8000ddc <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <getKeyInput+0x110>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2164      	movs	r1, #100	; 0x64
 8000ee2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	dd8a      	ble.n	8000e08 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	200000b0 	.word	0x200000b0
 8000f04:	200000b4 	.word	0x200000b4
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200000d8 	.word	0x200000d8

08000f10 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d901      	bls.n	8000f24 <is_button_pressed+0x14>
 8000f20:	2300      	movs	r3, #0
 8000f22:	e00d      	b.n	8000f40 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <is_button_pressed+0x3c>)
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <is_button_pressed+0x3c>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <is_button_pressed+0x30>
		}
		return 0;
 8000f3e:	2300      	movs	r3, #0
	}
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200000b8 	.word	0x200000b8

08000f50 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d901      	bls.n	8000f64 <is_button_pressed_1s+0x14>
 8000f60:	23ff      	movs	r3, #255	; 0xff
 8000f62:	e00d      	b.n	8000f80 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <is_button_pressed_1s+0x3c>)
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <is_button_pressed_1s+0x3c>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000f7e:	2300      	movs	r3, #0
	}
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000c8 	.word	0x200000c8

08000f90 <ToggleLEDRed>:
 * LED OFF: 0 0
 * We have assume if "light" = 0 => Traffic Light 1 and "Light"=1 => Traffic light 2.
 */
#include "displayallLED.h"
void ToggleLEDRed(int light)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED RED of Traffic Light 1 on
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <ToggleLEDRed+0x16>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d00c      	beq.n	8000fbe <ToggleLEDRed+0x2e>
 8000fa4:	e016      	b.n	8000fd4 <ToggleLEDRed+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <ToggleLEDRed+0x78>)
 8000fae:	f001 f9f6 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4815      	ldr	r0, [pc, #84]	; (800100c <ToggleLEDRed+0x7c>)
 8000fb8:	f001 f9f1 	bl	800239e <HAL_GPIO_WritePin>
	    	 break;
 8000fbc:	e020      	b.n	8001000 <ToggleLEDRed+0x70>
	      case 1:  //if "light" = 1 => LED RED of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <ToggleLEDRed+0x7c>)
 8000fc4:	f001 f9eb 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <ToggleLEDRed+0x7c>)
 8000fce:	f001 f9e6 	bl	800239e <HAL_GPIO_WritePin>
	    	break;
 8000fd2:	e015      	b.n	8001000 <ToggleLEDRed+0x70>
	      default:  // clear all led RED in 2 traffic light.
			  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <ToggleLEDRed+0x78>)
 8000fdc:	f001 f9df 	bl	800239e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <ToggleLEDRed+0x7c>)
 8000fe6:	f001 f9da 	bl	800239e <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <ToggleLEDRed+0x7c>)
 8000ff0:	f001 f9d5 	bl	800239e <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <ToggleLEDRed+0x7c>)
 8000ffa:	f001 f9d0 	bl	800239e <HAL_GPIO_WritePin>
			break;
 8000ffe:	bf00      	nop
	}
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00

08001010 <ToggleLEDYellow>:
void ToggleLEDYellow(int light)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED YELLOW of Traffic Light 1 on
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <ToggleLEDYellow+0x16>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d00c      	beq.n	800103e <ToggleLEDYellow+0x2e>
 8001024:	e016      	b.n	8001054 <ToggleLEDYellow+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	4816      	ldr	r0, [pc, #88]	; (8001088 <ToggleLEDYellow+0x78>)
 800102e:	f001 f9b6 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2108      	movs	r1, #8
 8001036:	4815      	ldr	r0, [pc, #84]	; (800108c <ToggleLEDYellow+0x7c>)
 8001038:	f001 f9b1 	bl	800239e <HAL_GPIO_WritePin>
	    	  break;
 800103c:	e020      	b.n	8001080 <ToggleLEDYellow+0x70>
	      case 1:  //if "light" = 1 => LED YELLOW of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2120      	movs	r1, #32
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <ToggleLEDYellow+0x7c>)
 8001044:	f001 f9ab 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2110      	movs	r1, #16
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <ToggleLEDYellow+0x7c>)
 800104e:	f001 f9a6 	bl	800239e <HAL_GPIO_WritePin>
	    	  break;
 8001052:	e015      	b.n	8001080 <ToggleLEDYellow+0x70>
	      default:  // clear all led YELLOW in 2 traffic light.
			  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <ToggleLEDYellow+0x78>)
 800105c:	f001 f99f 	bl	800239e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2108      	movs	r1, #8
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <ToggleLEDYellow+0x7c>)
 8001066:	f001 f99a 	bl	800239e <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <ToggleLEDYellow+0x7c>)
 8001070:	f001 f995 	bl	800239e <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <ToggleLEDYellow+0x7c>)
 800107a:	f001 f990 	bl	800239e <HAL_GPIO_WritePin>
			  break;
 800107e:	bf00      	nop
	}
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00

08001090 <ToggleLEDGreen>:
void ToggleLEDGreen(int light)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED YELLOW of Traffic Light 1 on
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <ToggleLEDGreen+0x16>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00c      	beq.n	80010be <ToggleLEDGreen+0x2e>
 80010a4:	e016      	b.n	80010d4 <ToggleLEDGreen+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <ToggleLEDGreen+0x78>)
 80010ae:	f001 f976 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <ToggleLEDGreen+0x7c>)
 80010b8:	f001 f971 	bl	800239e <HAL_GPIO_WritePin>
	      break;
 80010bc:	e020      	b.n	8001100 <ToggleLEDGreen+0x70>
	      case 1:  //if "light" = 1 => LED YELLOW of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <ToggleLEDGreen+0x7c>)
 80010c4:	f001 f96b 	bl	800239e <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2110      	movs	r1, #16
 80010cc:	480f      	ldr	r0, [pc, #60]	; (800110c <ToggleLEDGreen+0x7c>)
 80010ce:	f001 f966 	bl	800239e <HAL_GPIO_WritePin>
	      break;
 80010d2:	e015      	b.n	8001100 <ToggleLEDGreen+0x70>
	      default:  // clear all led YELLOW in 2 traffic light.
				HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <ToggleLEDGreen+0x78>)
 80010dc:	f001 f95f 	bl	800239e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2108      	movs	r1, #8
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <ToggleLEDGreen+0x7c>)
 80010e6:	f001 f95a 	bl	800239e <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <ToggleLEDGreen+0x7c>)
 80010f0:	f001 f955 	bl	800239e <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2110      	movs	r1, #16
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <ToggleLEDGreen+0x7c>)
 80010fa:	f001 f950 	bl	800239e <HAL_GPIO_WritePin>
		  break;
 80010fe:	bf00      	nop
	}
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010800 	.word	0x40010800
 800110c:	40010c00 	.word	0x40010c00

08001110 <ToggleLEDPedestrian>:
void ToggleLEDPedestrian(int state)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 * state 0: khong cho nguoi di bo di.
 * state 1: cho nguoi di bo di.
 * LED RED: khong cho nguoi di bo di.
 * LED GREEN: cho nguoi di bo di qua duong.
 * */
	switch(state)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <ToggleLEDPedestrian+0x16>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d00d      	beq.n	8001140 <ToggleLEDPedestrian+0x30>
 8001124:	e019      	b.n	800115a <ToggleLEDPedestrian+0x4a>
	{
	    case 0:  // LED RED
	    HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_SET);  //1
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <ToggleLEDPedestrian+0x6c>)
 800112e:	f001 f936 	bl	800239e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <ToggleLEDPedestrian+0x70>)
 800113a:	f001 f930 	bl	800239e <HAL_GPIO_WritePin>
	    break;  // LED GREEN
 800113e:	e019      	b.n	8001174 <ToggleLEDPedestrian+0x64>
	    case 1:
	    HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <ToggleLEDPedestrian+0x6c>)
 8001148:	f001 f929 	bl	800239e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_SET);  //1
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <ToggleLEDPedestrian+0x70>)
 8001154:	f001 f923 	bl	800239e <HAL_GPIO_WritePin>
	    break;
 8001158:	e00c      	b.n	8001174 <ToggleLEDPedestrian+0x64>
	    default:
		HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <ToggleLEDPedestrian+0x6c>)
 8001162:	f001 f91c 	bl	800239e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <ToggleLEDPedestrian+0x70>)
 800116e:	f001 f916 	bl	800239e <HAL_GPIO_WritePin>
		break;
 8001172:	bf00      	nop
	}

}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40010800 	.word	0x40010800

08001184 <clearLED>:
void clearLED(int index_light)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	/*
	 * Tat tat ca cac den LED
	 * index_light = 0  => Traffic light 1.
	 * index_light=1 => Traffic light 2.
	 *   */
	switch(index_light){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <clearLED+0x16>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d00c      	beq.n	80011b2 <clearLED+0x2e>
 8001198:	e016      	b.n	80011c8 <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_TFL1_GPIO_Port, D2_TFL1_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a0:	4816      	ldr	r0, [pc, #88]	; (80011fc <clearLED+0x78>)
 80011a2:	f001 f8fc 	bl	800239e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_TFL1_GPIO_Port, D3_TFL1_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2108      	movs	r1, #8
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <clearLED+0x7c>)
 80011ac:	f001 f8f7 	bl	800239e <HAL_GPIO_WritePin>
			break;
 80011b0:	e020      	b.n	80011f4 <clearLED+0x70>
		case 1:
            HAL_GPIO_WritePin(D4_TFL2_GPIO_Port, D4_TFL2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <clearLED+0x7c>)
 80011b8:	f001 f8f1 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_TFL2_GPIO_Port, D5_TFL2_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2110      	movs	r1, #16
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <clearLED+0x7c>)
 80011c2:	f001 f8ec 	bl	800239e <HAL_GPIO_WritePin>
			break;
 80011c6:	e015      	b.n	80011f4 <clearLED+0x70>
		default:
			HAL_GPIO_WritePin(D2_TFL1_GPIO_Port, D2_TFL1_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <clearLED+0x78>)
 80011d0:	f001 f8e5 	bl	800239e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_TFL1_GPIO_Port, D3_TFL1_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2108      	movs	r1, #8
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <clearLED+0x7c>)
 80011da:	f001 f8e0 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_TFL2_GPIO_Port, D4_TFL2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2120      	movs	r1, #32
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <clearLED+0x7c>)
 80011e4:	f001 f8db 	bl	800239e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_TFL2_GPIO_Port, D5_TFL2_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2110      	movs	r1, #16
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <clearLED+0x7c>)
 80011ee:	f001 f8d6 	bl	800239e <HAL_GPIO_WritePin>
			break;
 80011f2:	bf00      	nop
	}
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001208:	f000 fd0e 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120c:	f000 f814 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001210:	f000 f940 	bl	8001494 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001214:	f000 f852 	bl	80012bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001218:	f000 f89c 	bl	8001354 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800121c:	f000 f910 	bl	8001440 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <main+0x2c>)
 8001222:	f001 fd3f 	bl	8002ca4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <main+0x30>)
 800122a:	f001 fde5 	bl	8002df8 <HAL_TIM_PWM_Start>
//  SCH_Add_Task(getKeyInput, 0, 10);
//  SCH_Add_Task(fsm_automode, 0, 10);
//  SCH_Add_Task(fsm_manual_mode, 0, 10);
//  SCH_Add_Task(fsm_tunning_mode, 0, 10);
//  SCH_Add_Task(fsm_pedes_mode, 0, 10);
  while (1)
 800122e:	e7fe      	b.n	800122e <main+0x2a>
 8001230:	200001c4 	.word	0x200001c4
 8001234:	2000017c 	.word	0x2000017c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b090      	sub	sp, #64	; 0x40
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2228      	movs	r2, #40	; 0x28
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f93c 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2310      	movs	r3, #16
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800126a:	2300      	movs	r3, #0
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800126e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4618      	mov	r0, r3
 800127a:	f001 f8a9 	bl	80023d0 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001284:	f000 f988 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fb14 	bl	80028d0 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012ae:	f000 f973 	bl	8001598 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3740      	adds	r7, #64	; 0x40
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM2_Init+0x94>)
 80012da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_TIM2_Init+0x94>)
 80012e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM2_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM2_Init+0x94>)
 80012f0:	224f      	movs	r2, #79	; 0x4f
 80012f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_TIM2_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_TIM2_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <MX_TIM2_Init+0x94>)
 8001302:	f001 fc7f 	bl	8002c04 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800130c:	f000 f944 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <MX_TIM2_Init+0x94>)
 800131e:	f001 ffd3 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 f936 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM2_Init+0x94>)
 800133a:	f002 fb51 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 f928 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200001c4 	.word	0x200001c4

08001354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_TIM3_Init+0xe4>)
 8001386:	4a2d      	ldr	r2, [pc, #180]	; (800143c <MX_TIM3_Init+0xe8>)
 8001388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_TIM3_Init+0xe4>)
 800138c:	223f      	movs	r2, #63	; 0x3f
 800138e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_TIM3_Init+0xe4>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_TIM3_Init+0xe4>)
 8001398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013aa:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013ac:	f001 fc2a 	bl	8002c04 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013b6:	f000 f8ef 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c4:	4619      	mov	r1, r3
 80013c6:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013c8:	f001 ff7e 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013d2:	f000 f8e1 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013d8:	f001 fcb6 	bl	8002d48 <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013e2:	f000 f8d9 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <MX_TIM3_Init+0xe4>)
 80013f6:	f002 faf3 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001400:	f000 f8ca 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM3_Init+0xe4>)
 800141c:	f001 fe96 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001426:	f000 f8b7 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM3_Init+0xe4>)
 800142c:	f000 fada 	bl	80019e4 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000017c 	.word	0x2000017c
 800143c:	40000400 	.word	0x40000400

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_USART2_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800144c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001478:	f002 fb22 	bl	8003ac0 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 f889 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000020c 	.word	0x2000020c
 8001490:	40004400 	.word	0x40004400

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <MX_GPIO_Init+0xd0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pedes_Light_Pin|D3_TFL1_Pin|D5_TFL2_Pin|D4_TFL2_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80014de:	4822      	ldr	r0, [pc, #136]	; (8001568 <MX_GPIO_Init+0xd4>)
 80014e0:	f000 ff5d 	bl	800239e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pedes_Light_Pin|D2_TFL1_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014ea:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_GPIO_Init+0xd8>)
 80014ec:	f000 ff57 	bl	800239e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_Pedes_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pedes_Pin|Button1_Pin|Button2_Pin;
 80014f0:	2313      	movs	r3, #19
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <MX_GPIO_Init+0xd8>)
 8001504:	f000 fdb0 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001508:	2301      	movs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4619      	mov	r1, r3
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_GPIO_Init+0xd4>)
 800151c:	f000 fda4 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pedes_Light_Pin D3_TFL1_Pin D5_TFL2_Pin D4_TFL2_Pin */
  GPIO_InitStruct.Pin = D6_Pedes_Light_Pin|D3_TFL1_Pin|D5_TFL2_Pin|D4_TFL2_Pin;
 8001520:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2302      	movs	r3, #2
 8001530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <MX_GPIO_Init+0xd4>)
 800153a:	f000 fd95 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pedes_Light_Pin D2_TFL1_Pin */
  GPIO_InitStruct.Pin = D7_Pedes_Light_Pin|D2_TFL1_Pin;
 800153e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_GPIO_Init+0xd8>)
 8001558:	f000 fd86 	bl	8002068 <HAL_GPIO_Init>

}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40010c00 	.word	0x40010c00
 800156c:	40010800 	.word	0x40010800

08001570 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	// SCH_Update();
	TimerRun();
 8001578:	f000 f910 	bl	800179c <TimerRun>
	getKeyInput();
 800157c:	f7ff fc3e 	bl	8000dfc <getKeyInput>
	fsm_automode();
 8001580:	f7fe fe54 	bl	800022c <fsm_automode>
	fsm_manual_mode();
 8001584:	f7ff f840 	bl	8000608 <fsm_manual_mode>
	fsm_tunning_mode();
 8001588:	f7ff fa10 	bl	80009ac <fsm_tunning_mode>
	fsm_pedes_mode();
 800158c:	f7ff f9ae 	bl	80008ec <fsm_pedes_mode>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <setTimer1>:
int timer8_counter=0;
int timer8_flag= 0;
int timer9_counter=0;
int timer9_flag= 0;
void setTimer1(int duration)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CYCLE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <setTimer1+0x2c>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1092      	asrs	r2, r2, #2
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <setTimer1+0x30>)
 80015bc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <setTimer1+0x34>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	66666667 	.word	0x66666667
 80015d4:	20000128 	.word	0x20000128
 80015d8:	2000012c 	.word	0x2000012c

080015dc <setTimer2>:
void setTimer2(int duration)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CYCLE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <setTimer2+0x2c>)
 80015e8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ec:	1092      	asrs	r2, r2, #2
 80015ee:	17db      	asrs	r3, r3, #31
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <setTimer2+0x30>)
 80015f4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <setTimer2+0x34>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	66666667 	.word	0x66666667
 800160c:	20000130 	.word	0x20000130
 8001610:	20000134 	.word	0x20000134

08001614 <setTimer3>:
void setTimer3(int duration)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CYCLE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <setTimer3+0x2c>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1092      	asrs	r2, r2, #2
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <setTimer3+0x30>)
 800162c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <setTimer3+0x34>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	66666667 	.word	0x66666667
 8001644:	20000138 	.word	0x20000138
 8001648:	2000013c 	.word	0x2000013c

0800164c <setTimer4>:
void setTimer4(int duration)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/CYCLE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <setTimer4+0x2c>)
 8001658:	fb82 1203 	smull	r1, r2, r2, r3
 800165c:	1092      	asrs	r2, r2, #2
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <setTimer4+0x30>)
 8001664:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <setTimer4+0x34>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	66666667 	.word	0x66666667
 800167c:	20000140 	.word	0x20000140
 8001680:	20000144 	.word	0x20000144

08001684 <setTimer5>:
void setTimer5(int duration)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CYCLE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <setTimer5+0x2c>)
 8001690:	fb82 1203 	smull	r1, r2, r2, r3
 8001694:	1092      	asrs	r2, r2, #2
 8001696:	17db      	asrs	r3, r3, #31
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <setTimer5+0x30>)
 800169c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <setTimer5+0x34>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	66666667 	.word	0x66666667
 80016b4:	20000148 	.word	0x20000148
 80016b8:	2000014c 	.word	0x2000014c

080016bc <setTimer6>:
void setTimer6(int duration)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/CYCLE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <setTimer6+0x2c>)
 80016c8:	fb82 1203 	smull	r1, r2, r2, r3
 80016cc:	1092      	asrs	r2, r2, #2
 80016ce:	17db      	asrs	r3, r3, #31
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <setTimer6+0x30>)
 80016d4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <setTimer6+0x34>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	66666667 	.word	0x66666667
 80016ec:	20000150 	.word	0x20000150
 80016f0:	20000154 	.word	0x20000154

080016f4 <setTimer7>:
void setTimer7(int duration)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/CYCLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <setTimer7+0x2c>)
 8001700:	fb82 1203 	smull	r1, r2, r2, r3
 8001704:	1092      	asrs	r2, r2, #2
 8001706:	17db      	asrs	r3, r3, #31
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	4a06      	ldr	r2, [pc, #24]	; (8001724 <setTimer7+0x30>)
 800170c:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <setTimer7+0x34>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	66666667 	.word	0x66666667
 8001724:	20000158 	.word	0x20000158
 8001728:	2000015c 	.word	0x2000015c

0800172c <setTimer8>:
void setTimer8(int duration)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/CYCLE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <setTimer8+0x2c>)
 8001738:	fb82 1203 	smull	r1, r2, r2, r3
 800173c:	1092      	asrs	r2, r2, #2
 800173e:	17db      	asrs	r3, r3, #31
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	4a06      	ldr	r2, [pc, #24]	; (800175c <setTimer8+0x30>)
 8001744:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <setTimer8+0x34>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	66666667 	.word	0x66666667
 800175c:	20000160 	.word	0x20000160
 8001760:	20000164 	.word	0x20000164

08001764 <setTimer9>:
void setTimer9(int duration)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/CYCLE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <setTimer9+0x2c>)
 8001770:	fb82 1203 	smull	r1, r2, r2, r3
 8001774:	1092      	asrs	r2, r2, #2
 8001776:	17db      	asrs	r3, r3, #31
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <setTimer9+0x30>)
 800177c:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <setTimer9+0x34>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	66666667 	.word	0x66666667
 8001794:	20000168 	.word	0x20000168
 8001798:	2000016c 	.word	0x2000016c

0800179c <TimerRun>:
void TimerRun()
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 80017a0:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <TimerRun+0x12c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd0b      	ble.n	80017c0 <TimerRun+0x24>
	{
		timer1_counter --;
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <TimerRun+0x12c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4a46      	ldr	r2, [pc, #280]	; (80018c8 <TimerRun+0x12c>)
 80017b0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 80017b2:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <TimerRun+0x12c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc02      	bgt.n	80017c0 <TimerRun+0x24>
		{
			timer1_flag=1;
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <TimerRun+0x130>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <TimerRun+0x134>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dd0b      	ble.n	80017e0 <TimerRun+0x44>
	{
		timer2_counter --;
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <TimerRun+0x134>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <TimerRun+0x134>)
 80017d0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <TimerRun+0x134>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dc02      	bgt.n	80017e0 <TimerRun+0x44>
		{
			timer2_flag=1;
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <TimerRun+0x138>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <TimerRun+0x13c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dd0b      	ble.n	8001800 <TimerRun+0x64>
	{
		timer3_counter --;
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <TimerRun+0x13c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <TimerRun+0x13c>)
 80017f0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <TimerRun+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dc02      	bgt.n	8001800 <TimerRun+0x64>
		{
			timer3_flag=1;
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <TimerRun+0x140>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0)
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <TimerRun+0x144>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd0b      	ble.n	8001820 <TimerRun+0x84>
	{
		timer4_counter --;
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <TimerRun+0x144>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <TimerRun+0x144>)
 8001810:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <TimerRun+0x144>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dc02      	bgt.n	8001820 <TimerRun+0x84>
		{
			timer4_flag=1;
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <TimerRun+0x148>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0)
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <TimerRun+0x14c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	dd0b      	ble.n	8001840 <TimerRun+0xa4>
	{
		timer5_counter --;
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <TimerRun+0x14c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <TimerRun+0x14c>)
 8001830:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <TimerRun+0x14c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	dc02      	bgt.n	8001840 <TimerRun+0xa4>
		{
			timer5_flag=1;
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <TimerRun+0x150>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0)
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <TimerRun+0x154>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	dd0b      	ble.n	8001860 <TimerRun+0xc4>
	{
		timer6_counter --;
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <TimerRun+0x154>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3b01      	subs	r3, #1
 800184e:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <TimerRun+0x154>)
 8001850:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0)
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <TimerRun+0x154>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	dc02      	bgt.n	8001860 <TimerRun+0xc4>
		{
			timer6_flag=1;
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <TimerRun+0x158>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0)
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <TimerRun+0x15c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd0b      	ble.n	8001880 <TimerRun+0xe4>
	{
		timer7_counter --;
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <TimerRun+0x15c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <TimerRun+0x15c>)
 8001870:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0)
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <TimerRun+0x15c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	dc02      	bgt.n	8001880 <TimerRun+0xe4>
		{
			timer7_flag=1;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <TimerRun+0x160>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0)
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <TimerRun+0x164>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	dd0b      	ble.n	80018a0 <TimerRun+0x104>
	{
		timer8_counter --;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <TimerRun+0x164>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <TimerRun+0x164>)
 8001890:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0)
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <TimerRun+0x164>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	dc02      	bgt.n	80018a0 <TimerRun+0x104>
		{
			timer8_flag=1;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <TimerRun+0x168>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer9_counter > 0)
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <TimerRun+0x16c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dd0b      	ble.n	80018c0 <TimerRun+0x124>
	{
		timer9_counter --;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <TimerRun+0x16c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4a16      	ldr	r2, [pc, #88]	; (8001908 <TimerRun+0x16c>)
 80018b0:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <TimerRun+0x16c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dc02      	bgt.n	80018c0 <TimerRun+0x124>
		{
			timer9_flag=1;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <TimerRun+0x170>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000128 	.word	0x20000128
 80018cc:	2000012c 	.word	0x2000012c
 80018d0:	20000130 	.word	0x20000130
 80018d4:	20000134 	.word	0x20000134
 80018d8:	20000138 	.word	0x20000138
 80018dc:	2000013c 	.word	0x2000013c
 80018e0:	20000140 	.word	0x20000140
 80018e4:	20000144 	.word	0x20000144
 80018e8:	20000148 	.word	0x20000148
 80018ec:	2000014c 	.word	0x2000014c
 80018f0:	20000150 	.word	0x20000150
 80018f4:	20000154 	.word	0x20000154
 80018f8:	20000158 	.word	0x20000158
 80018fc:	2000015c 	.word	0x2000015c
 8001900:	20000160 	.word	0x20000160
 8001904:	20000164 	.word	0x20000164
 8001908:	20000168 	.word	0x20000168
 800190c:	2000016c 	.word	0x2000016c

08001910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_MspInit+0x5c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_MspInit+0x5c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_MspInit+0x5c>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x5c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_MspInit+0x5c>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x5c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_MspInit+0x60>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_MspInit+0x60>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d114      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	201c      	movs	r0, #28
 80019a4:	f000 fa79 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a8:	201c      	movs	r0, #28
 80019aa:	f000 fa92 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ae:	e010      	b.n	80019d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_TIM_Base_MspInit+0x6c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10b      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_TIM_Base_MspInit+0x68>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40000400 	.word	0x40000400

080019e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_TIM_MspPostInit+0x58>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d117      	bne.n	8001a34 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_MspPostInit+0x5c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_TIM_MspPostInit+0x5c>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_TIM_MspPostInit+0x5c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_TIM_MspPostInit+0x60>)
 8001a30:	f000 fb1a 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010800 	.word	0x40010800

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d137      	bne.n	8001ad8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a72:	61d3      	str	r3, [r2, #28]
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <HAL_UART_MspInit+0xa0>)
 8001aac:	f000 fadc 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <HAL_UART_MspInit+0xa0>)
 8001ac4:	f000 fad0 	bl	8002068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2026      	movs	r0, #38	; 0x26
 8001ace:	f000 f9e4 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad2:	2026      	movs	r0, #38	; 0x26
 8001ad4:	f000 f9fd 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40004400 	.word	0x40004400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b32:	f000 f8bf 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f001 f9fb 	bl	8002f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001c4 	.word	0x200001c4

08001b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <USART2_IRQHandler+0x10>)
 8001b56:	f002 f893 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000020c 	.word	0x2000020c

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f002 fc6c 	bl	8004470 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20005000 	.word	0x20005000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000170 	.word	0x20000170
 8001bcc:	20000268 	.word	0x20000268

08001bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c02:	f7ff ffe5 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f002 fc39 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0a:	f7ff fafb 	bl	8001204 <main>
  bx lr
 8001c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c18:	08004e44 	.word	0x08004e44
  ldr r2, =_sbss
 8001c1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c20:	20000264 	.word	0x20000264

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x28>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f923 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fe64 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f93b 	bl	8001eee <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f903 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000020 	.word	0x20000020
 8001cac:	20000028 	.word	0x20000028
 8001cb0:	20000024 	.word	0x20000024

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000028 	.word	0x20000028
 8001cd4:	20000250 	.word	0x20000250

08001cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_GetTick+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000250 	.word	0x20000250

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <__NVIC_EnableIRQ+0x34>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff90 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff2d 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff42 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff35 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e020      	b.n	8001f70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020e 	bic.w	r2, r2, #14
 8001f3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d005      	beq.n	8001f9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e051      	b.n	8002042 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 020e 	bic.w	r2, r2, #14
 8001fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_DMA_Abort_IT+0xd0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d029      	beq.n	800201c <HAL_DMA_Abort_IT+0xa0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_DMA_Abort_IT+0xd4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_DMA_Abort_IT+0x9c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_DMA_Abort_IT+0xd8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01a      	beq.n	8002012 <HAL_DMA_Abort_IT+0x96>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_DMA_Abort_IT+0xdc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d012      	beq.n	800200c <HAL_DMA_Abort_IT+0x90>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_DMA_Abort_IT+0xe0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00a      	beq.n	8002006 <HAL_DMA_Abort_IT+0x8a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_DMA_Abort_IT+0xe4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d102      	bne.n	8002000 <HAL_DMA_Abort_IT+0x84>
 8001ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ffe:	e00e      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 8002000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002004:	e00b      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 8002006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200a:	e008      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 800200c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002010:	e005      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	e002      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 8002018:	2310      	movs	r3, #16
 800201a:	e000      	b.n	800201e <HAL_DMA_Abort_IT+0xa2>
 800201c:	2301      	movs	r3, #1
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_DMA_Abort_IT+0xe8>)
 8002020:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
    } 
  }
  return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40020008 	.word	0x40020008
 8002050:	4002001c 	.word	0x4002001c
 8002054:	40020030 	.word	0x40020030
 8002058:	40020044 	.word	0x40020044
 800205c:	40020058 	.word	0x40020058
 8002060:	4002006c 	.word	0x4002006c
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e169      	b.n	8002350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8158 	bne.w	800234a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4a98      	ldr	r2, [pc, #608]	; (8002308 <HAL_GPIO_Init+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4a98      	ldr	r2, [pc, #608]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a96      	ldr	r2, [pc, #600]	; (800230c <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a96      	ldr	r2, [pc, #600]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a94      	ldr	r2, [pc, #592]	; (8002310 <HAL_GPIO_Init+0x2a8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a94      	ldr	r2, [pc, #592]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a92      	ldr	r2, [pc, #584]	; (8002314 <HAL_GPIO_Init+0x2ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a92      	ldr	r2, [pc, #584]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a90      	ldr	r2, [pc, #576]	; (8002318 <HAL_GPIO_Init+0x2b0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a79      	ldr	r2, [pc, #484]	; (800231c <HAL_GPIO_Init+0x2b4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b1 	beq.w	800234a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_GPIO_Init+0x2b8>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1e0>
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002248:	2304      	movs	r3, #4
 800224a:	e004      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_Init+0x1ee>
 8002254:	2300      	movs	r3, #0
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002266:	492f      	ldr	r1, [pc, #188]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	492c      	ldr	r1, [pc, #176]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4928      	ldr	r1, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 8002298:	4013      	ands	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491e      	ldr	r1, [pc, #120]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4914      	ldr	r1, [pc, #80]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d021      	beq.n	800233c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e021      	b.n	800234a <HAL_GPIO_Init+0x2e2>
 8002306:	bf00      	nop
 8002308:	10320000 	.word	0x10320000
 800230c:	10310000 	.word	0x10310000
 8002310:	10220000 	.word	0x10220000
 8002314:	10210000 	.word	0x10210000
 8002318:	10120000 	.word	0x10120000
 800231c:	10110000 	.word	0x10110000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	40010800 	.word	0x40010800
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_GPIO_Init+0x304>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	43db      	mvns	r3, r3
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <HAL_GPIO_Init+0x304>)
 8002346:	4013      	ands	r3, r2
 8002348:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae8e 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ae:	787b      	ldrb	r3, [r7, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e26c      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4b8f      	ldr	r3, [pc, #572]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d112      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
 8002408:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d10b      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	4b89      	ldr	r3, [pc, #548]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06c      	beq.n	80024fc <HAL_RCC_OscConfig+0x12c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d168      	bne.n	80024fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e246      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x76>
 8002438:	4b80      	ldr	r3, [pc, #512]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7f      	ldr	r2, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e02e      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7a      	ldr	r2, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a77      	ldr	r2, [pc, #476]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0xbc>
 8002472:	4b72      	ldr	r3, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a71      	ldr	r2, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 800248c:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a67      	ldr	r2, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff fc14 	bl	8001cd8 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fc10 	bl	8001cd8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1fa      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe4>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fc00 	bl	8001cd8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fbfc 	bl	8001cd8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1e6      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x10c>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1ba      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4939      	ldr	r1, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fbb5 	bl	8001cd8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff fbb1 	bl	8001cd8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e19b      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fb94 	bl	8001cd8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff fb90 	bl	8001cd8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e17a      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03a      	beq.n	8002654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff fb74 	bl	8001cd8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fb70 	bl	8001cd8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e15a      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f000 fad8 	bl	8002bc8 <RCC_Delay>
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff fb5a 	bl	8001cd8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	e00f      	b.n	8002648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fb56 	bl	8001cd8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d908      	bls.n	8002648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e140      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	42420000 	.word	0x42420000
 8002644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b9e      	ldr	r3, [pc, #632]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e9      	bne.n	8002628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a6 	beq.w	80027ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a93      	ldr	r2, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a8a      	ldr	r2, [pc, #552]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fb17 	bl	8001cd8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fb13 	bl	8001cd8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0fd      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x312>
 80026d4:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x334>
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a72      	ldr	r2, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x356>
 800270c:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a6c      	ldr	r2, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fac7 	bl	8001cd8 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fac3 	bl	8001cd8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ab      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x37e>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff fab1 	bl	8001cd8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff faad 	bl	8001cd8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e095      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8081 	beq.w	80028ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b42      	ldr	r3, [pc, #264]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d061      	beq.n	8002888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d146      	bne.n	800285a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fa81 	bl	8001cd8 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff fa7d 	bl	8001cd8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e067      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d108      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	492d      	ldr	r1, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a19      	ldr	r1, [r3, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	430b      	orrs	r3, r1
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fa51 	bl	8001cd8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff fa4d 	bl	8001cd8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e037      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x46a>
 8002858:	e02f      	b.n	80028ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fa3a 	bl	8001cd8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff fa36 	bl	8001cd8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e020      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x498>
 8002886:	e018      	b.n	80028ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060

080028d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d0      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4965      	ldr	r1, [pc, #404]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d040      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e073      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4936      	ldr	r1, [pc, #216]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7ff f98a 	bl	8001cd8 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff f986 	bl	8001cd8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e053      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d210      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1cc>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f8e8 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08004df0 	.word	0x08004df0
 8002a9c:	20000020 	.word	0x20000020
 8002aa0:	20000024 	.word	0x20000024

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b490      	push	{r4, r7}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aac:	1d3c      	adds	r4, r7, #4
 8002aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab4:	f240 2301 	movw	r3, #513	; 0x201
 8002ab8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x46>
 8002ae2:	e02d      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae6:	623b      	str	r3, [r7, #32]
      break;
 8002ae8:	e02d      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002af6:	4413      	add	r3, r2
 8002af8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002afc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c5b      	lsrs	r3, r3, #17
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b16:	4413      	add	r3, r2
 8002b18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b22:	fb02 f203 	mul.w	r2, r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2e:	e004      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	623b      	str	r3, [r7, #32]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	623b      	str	r3, [r7, #32]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc90      	pop	{r4, r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	08004de0 	.word	0x08004de0
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	007a1200 	.word	0x007a1200
 8002b60:	003d0900 	.word	0x003d0900

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	20000020 	.word	0x20000020

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004e00 	.word	0x08004e00

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffde 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08004e00 	.word	0x08004e00

08002bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <RCC_Delay+0x34>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <RCC_Delay+0x38>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0a5b      	lsrs	r3, r3, #9
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002be4:	bf00      	nop
  }
  while (Delay --);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	60fa      	str	r2, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f9      	bne.n	8002be4 <RCC_Delay+0x1c>
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000020 	.word	0x20000020
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e041      	b.n	8002c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fea2 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fc28 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d001      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e03a      	b.n	8002d32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_TIM_Base_Start_IT+0x98>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x58>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d009      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x58>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x58>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d111      	bne.n	8002d20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d010      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	e007      	b.n	8002d30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800

08002d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e041      	b.n	8002dde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f839 	bl	8002de6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 fb86 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_PWM_Start+0x24>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e022      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d109      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x3e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e015      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_PWM_Start+0x58>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e05e      	b.n	8002f28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x82>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	e013      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0x92>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e88:	e00b      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xa2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	e003      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd74 	bl	8003998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_TIM_PWM_Start+0x138>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_PWM_Start+0x138>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d009      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIM_PWM_Start+0x13c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_TIM_PWM_Start+0x140>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d111      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d010      	beq.n	8002f26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	e007      	b.n	8002f26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800

08002f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0202 	mvn.w	r2, #2
 8002f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa6f 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa62 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fa71 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0204 	mvn.w	r2, #4
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa45 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa38 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa47 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b08      	cmp	r3, #8
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0208 	mvn.w	r2, #8
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2204      	movs	r2, #4
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa1b 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa0e 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa1d 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b10      	cmp	r3, #16
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0210 	mvn.w	r2, #16
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2208      	movs	r2, #8
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9f1 	bl	8003462 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9e4 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f9f3 	bl	8003474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0201 	mvn.w	r2, #1
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fa58 	bl	8001570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fce1 	bl	8003aae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9b7 	bl	8003486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0220 	mvn.w	r2, #32
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fcac 	bl	8003a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003162:	2302      	movs	r3, #2
 8003164:	e0ac      	b.n	80032c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	f200 809f 	bhi.w	80032b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031b1 	.word	0x080031b1
 8003180:	080032b5 	.word	0x080032b5
 8003184:	080032b5 	.word	0x080032b5
 8003188:	080032b5 	.word	0x080032b5
 800318c:	080031f1 	.word	0x080031f1
 8003190:	080032b5 	.word	0x080032b5
 8003194:	080032b5 	.word	0x080032b5
 8003198:	080032b5 	.word	0x080032b5
 800319c:	08003233 	.word	0x08003233
 80031a0:	080032b5 	.word	0x080032b5
 80031a4:	080032b5 	.word	0x080032b5
 80031a8:	080032b5 	.word	0x080032b5
 80031ac:	08003273 	.word	0x08003273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f9d0 	bl	800355c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0208 	orr.w	r2, r2, #8
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0204 	bic.w	r2, r2, #4
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	619a      	str	r2, [r3, #24]
      break;
 80031ee:	e062      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fa16 	bl	8003628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	021a      	lsls	r2, r3, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
      break;
 8003230:	e041      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa5f 	bl	80036fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0208 	orr.w	r2, r2, #8
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0204 	bic.w	r2, r2, #4
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	61da      	str	r2, [r3, #28]
      break;
 8003270:	e021      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 faa9 	bl	80037d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69d9      	ldr	r1, [r3, #28]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	61da      	str	r2, [r3, #28]
      break;
 80032b2:	e000      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0b3      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x180>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003306:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d03e      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xd0>
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331e:	f200 8087 	bhi.w	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	f000 8085 	beq.w	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d87f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d01a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xa2>
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d87b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d050      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x116>
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d877      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d03c      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xf6>
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d873      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d058      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x136>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d86f      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d064      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x156>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d86b      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d060      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x156>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d867      	bhi.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x156>
 8003364:	2b10      	cmp	r3, #16
 8003366:	d05a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003368:	e062      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 faee 	bl	800395a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800338c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	609a      	str	r2, [r3, #8]
      break;
 8003396:	e04e      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f000 fad7 	bl	800395a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ba:	609a      	str	r2, [r3, #8]
      break;
 80033bc:	e03b      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 fa4e 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2150      	movs	r1, #80	; 0x50
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 faa5 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80033dc:	e02b      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 fa6c 	bl	80038c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2160      	movs	r1, #96	; 0x60
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fa95 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80033fc:	e01b      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa2e 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fa85 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 800341c:	e00b      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f000 fa7c 	bl	8003926 <TIM_ITRx_SetConfig>
        break;
 800342e:	e002      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a29      	ldr	r2, [pc, #164]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0xbc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0xc0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <TIM_Base_SetConfig+0xbc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <TIM_Base_SetConfig+0xc0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800

0800355c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10c      	bne.n	80035d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0308 	bic.w	r3, r3, #8
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40012c00 	.word	0x40012c00

08003628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0210 	bic.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <TIM_OC2_SetConfig+0xd0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10d      	bne.n	80036a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <TIM_OC2_SetConfig+0xd0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d113      	bne.n	80036d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00

080036fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <TIM_OC3_SetConfig+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10d      	bne.n	8003776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <TIM_OC3_SetConfig+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800378c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00

080037d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <TIM_OC4_SetConfig+0x98>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d109      	bne.n	8003844 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 0210 	bic.w	r2, r3, #16
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	431a      	orrs	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2201      	movs	r2, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1a      	ldr	r2, [r3, #32]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	401a      	ands	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e046      	b.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d009      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10c      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800

08003a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03f      	b.n	8003b52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd ffae 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fc25 	bl	8004354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08a      	sub	sp, #40	; 0x28
 8003b5e:	af02      	add	r7, sp, #8
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d17c      	bne.n	8003c74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Transmit+0x2c>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e075      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Transmit+0x3e>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e06e      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2221      	movs	r2, #33	; 0x21
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bae:	f7fe f893 	bl	8001cd8 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d108      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e003      	b.n	8003be4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bec:	e02a      	b.n	8003c44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fa11 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3302      	adds	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e007      	b.n	8003c36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cf      	bne.n	8003bee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9e1 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x52>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa99 	bl	8004202 <UART_Receive_IT>
      return;
 8003cd0:	e17b      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80b1 	beq.w	8003e3c <HAL_UART_IRQHandler+0x1bc>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x70>
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a6 	beq.w	8003e3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_UART_IRQHandler+0x90>
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_UART_IRQHandler+0xb0>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_UART_IRQHandler+0xd0>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <HAL_UART_IRQHandler+0xfa>
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <HAL_UART_IRQHandler+0xee>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 811e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa32 	bl	8004202 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x146>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d031      	beq.n	8003e2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f974 	bl	80040b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d023      	beq.n	8003e22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4a76      	ldr	r2, [pc, #472]	; (8003fd0 <HAL_UART_IRQHandler+0x350>)
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f8bc 	bl	8001f7c <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00e      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8ec 	bl	8003ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00a      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8e8 	bl	8003ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8e4 	bl	8003ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e36:	e0c3      	b.n	8003fc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	bf00      	nop
    return;
 8003e3a:	e0c1      	b.n	8003fc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 80a1 	bne.w	8003f88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 809b 	beq.w	8003f88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8095 	beq.w	8003f88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04e      	beq.n	8003f20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e8c:	8a3b      	ldrh	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8098 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e98:	8a3a      	ldrh	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	f080 8092 	bcs.w	8003fc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8a3a      	ldrh	r2, [r7, #16]
 8003ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d02b      	beq.n	8003f08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ebe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0210 	bic.w	r2, r2, #16
 8003efc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd ffff 	bl	8001f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f876 	bl	800400a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f1e:	e051      	b.n	8003fc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d047      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f38:	8a7b      	ldrh	r3, [r7, #18]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0210 	bic.w	r2, r2, #16
 8003f7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f7c:	8a7b      	ldrh	r3, [r7, #18]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f842 	bl	800400a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f86:	e01f      	b.n	8003fc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x324>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8c9 	bl	8004134 <UART_Transmit_IT>
    return;
 8003fa2:	e012      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <HAL_UART_IRQHandler+0x34a>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f90a 	bl	80041d2 <UART_EndTransmit_IT>
    return;
 8003fbe:	e004      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
    return;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_UART_IRQHandler+0x34a>
      return;
 8003fc8:	bf00      	nop
  }
}
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	0800410d 	.word	0x0800410d

08003fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	e02c      	b.n	800408c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d028      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x30>
 8004040:	f7fd fe4a 	bl	8001cd8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	d21d      	bcs.n	800408c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800405e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e00f      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d0c3      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d107      	bne.n	80040f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0210 	bic.w	r2, r2, #16
 80040f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff ff66 	bl	8003ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b21      	cmp	r3, #33	; 0x21
 8004146:	d13e      	bne.n	80041c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d114      	bne.n	800417c <UART_Transmit_IT+0x48>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d110      	bne.n	800417c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]
 800417a:	e008      	b.n	800418e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6211      	str	r1, [r2, #32]
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4619      	mov	r1, r3
 800419c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff feee 	bl	8003fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b22      	cmp	r3, #34	; 0x22
 8004214:	f040 8099 	bne.w	800434a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d117      	bne.n	8004252 <UART_Receive_IT+0x50>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d113      	bne.n	8004252 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	b29a      	uxth	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
 8004250:	e026      	b.n	80042a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d007      	beq.n	8004276 <UART_Receive_IT+0x74>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <UART_Receive_IT+0x82>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e008      	b.n	8004296 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4619      	mov	r1, r3
 80042ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d148      	bne.n	8004346 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0220 	bic.w	r2, r2, #32
 80042c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d123      	bne.n	800433c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0210 	bic.w	r2, r2, #16
 8004308:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d10a      	bne.n	800432e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fe68 	bl	800400a <HAL_UARTEx_RxEventCallback>
 800433a:	e002      	b.n	8004342 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fe52 	bl	8003fe6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e002      	b.n	800434c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800438e:	f023 030c 	bic.w	r3, r3, #12
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	430b      	orrs	r3, r1
 800439a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <UART_SetConfig+0x114>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d103      	bne.n	80043c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe fbf0 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	e002      	b.n	80043ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fbd8 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80043c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009a      	lsls	r2, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	4a22      	ldr	r2, [pc, #136]	; (800446c <UART_SetConfig+0x118>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	0119      	lsls	r1, r3, #4
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <UART_SetConfig+0x118>)
 8004402:	fba3 0302 	umull	r0, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2064      	movs	r0, #100	; 0x64
 800440a:	fb00 f303 	mul.w	r3, r0, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	3332      	adds	r3, #50	; 0x32
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <UART_SetConfig+0x118>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	4419      	add	r1, r3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009a      	lsls	r2, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fbb2 f2f3 	udiv	r2, r2, r3
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <UART_SetConfig+0x118>)
 800443a:	fba3 0302 	umull	r0, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2064      	movs	r0, #100	; 0x64
 8004442:	fb00 f303 	mul.w	r3, r0, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	; 0x32
 800444c:	4a07      	ldr	r2, [pc, #28]	; (800446c <UART_SetConfig+0x118>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	440a      	add	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40013800 	.word	0x40013800
 800446c:	51eb851f 	.word	0x51eb851f

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000002c 	.word	0x2000002c

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	2600      	movs	r6, #0
 8004480:	4d0c      	ldr	r5, [pc, #48]	; (80044b4 <__libc_init_array+0x38>)
 8004482:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004484:	1b64      	subs	r4, r4, r5
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	42a6      	cmp	r6, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	f000 fc5c 	bl	8004d48 <_init>
 8004490:	2600      	movs	r6, #0
 8004492:	4d0a      	ldr	r5, [pc, #40]	; (80044bc <__libc_init_array+0x40>)
 8004494:	4c0a      	ldr	r4, [pc, #40]	; (80044c0 <__libc_init_array+0x44>)
 8004496:	1b64      	subs	r4, r4, r5
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	42a6      	cmp	r6, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a4:	4798      	blx	r3
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ae:	4798      	blx	r3
 80044b0:	3601      	adds	r6, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	08004e3c 	.word	0x08004e3c
 80044b8:	08004e3c 	.word	0x08004e3c
 80044bc:	08004e3c 	.word	0x08004e3c
 80044c0:	08004e40 	.word	0x08004e40

080044c4 <memset>:
 80044c4:	4603      	mov	r3, r0
 80044c6:	4402      	add	r2, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <siprintf>:
 80044d4:	b40e      	push	{r1, r2, r3}
 80044d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044da:	b500      	push	{lr}
 80044dc:	b09c      	sub	sp, #112	; 0x70
 80044de:	ab1d      	add	r3, sp, #116	; 0x74
 80044e0:	9002      	str	r0, [sp, #8]
 80044e2:	9006      	str	r0, [sp, #24]
 80044e4:	9107      	str	r1, [sp, #28]
 80044e6:	9104      	str	r1, [sp, #16]
 80044e8:	4808      	ldr	r0, [pc, #32]	; (800450c <siprintf+0x38>)
 80044ea:	4909      	ldr	r1, [pc, #36]	; (8004510 <siprintf+0x3c>)
 80044ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f0:	9105      	str	r1, [sp, #20]
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	a902      	add	r1, sp, #8
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	f000 f868 	bl	80045cc <_svfiprintf_r>
 80044fc:	2200      	movs	r2, #0
 80044fe:	9b02      	ldr	r3, [sp, #8]
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	b01c      	add	sp, #112	; 0x70
 8004504:	f85d eb04 	ldr.w	lr, [sp], #4
 8004508:	b003      	add	sp, #12
 800450a:	4770      	bx	lr
 800450c:	2000002c 	.word	0x2000002c
 8004510:	ffff0208 	.word	0xffff0208

08004514 <__ssputs_r>:
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	688e      	ldr	r6, [r1, #8]
 800451a:	4682      	mov	sl, r0
 800451c:	429e      	cmp	r6, r3
 800451e:	460c      	mov	r4, r1
 8004520:	4690      	mov	r8, r2
 8004522:	461f      	mov	r7, r3
 8004524:	d838      	bhi.n	8004598 <__ssputs_r+0x84>
 8004526:	898a      	ldrh	r2, [r1, #12]
 8004528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800452c:	d032      	beq.n	8004594 <__ssputs_r+0x80>
 800452e:	6825      	ldr	r5, [r4, #0]
 8004530:	6909      	ldr	r1, [r1, #16]
 8004532:	3301      	adds	r3, #1
 8004534:	eba5 0901 	sub.w	r9, r5, r1
 8004538:	6965      	ldr	r5, [r4, #20]
 800453a:	444b      	add	r3, r9
 800453c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004544:	106d      	asrs	r5, r5, #1
 8004546:	429d      	cmp	r5, r3
 8004548:	bf38      	it	cc
 800454a:	461d      	movcc	r5, r3
 800454c:	0553      	lsls	r3, r2, #21
 800454e:	d531      	bpl.n	80045b4 <__ssputs_r+0xa0>
 8004550:	4629      	mov	r1, r5
 8004552:	f000 fb53 	bl	8004bfc <_malloc_r>
 8004556:	4606      	mov	r6, r0
 8004558:	b950      	cbnz	r0, 8004570 <__ssputs_r+0x5c>
 800455a:	230c      	movs	r3, #12
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	f8ca 3000 	str.w	r3, [sl]
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	464a      	mov	r2, r9
 8004572:	6921      	ldr	r1, [r4, #16]
 8004574:	f000 face 	bl	8004b14 <memcpy>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	6126      	str	r6, [r4, #16]
 8004586:	444e      	add	r6, r9
 8004588:	6026      	str	r6, [r4, #0]
 800458a:	463e      	mov	r6, r7
 800458c:	6165      	str	r5, [r4, #20]
 800458e:	eba5 0509 	sub.w	r5, r5, r9
 8004592:	60a5      	str	r5, [r4, #8]
 8004594:	42be      	cmp	r6, r7
 8004596:	d900      	bls.n	800459a <__ssputs_r+0x86>
 8004598:	463e      	mov	r6, r7
 800459a:	4632      	mov	r2, r6
 800459c:	4641      	mov	r1, r8
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	f000 fac6 	bl	8004b30 <memmove>
 80045a4:	68a3      	ldr	r3, [r4, #8]
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	4432      	add	r2, r6
 80045ac:	2000      	movs	r0, #0
 80045ae:	60a3      	str	r3, [r4, #8]
 80045b0:	6022      	str	r2, [r4, #0]
 80045b2:	e7db      	b.n	800456c <__ssputs_r+0x58>
 80045b4:	462a      	mov	r2, r5
 80045b6:	f000 fb7b 	bl	8004cb0 <_realloc_r>
 80045ba:	4606      	mov	r6, r0
 80045bc:	2800      	cmp	r0, #0
 80045be:	d1e1      	bne.n	8004584 <__ssputs_r+0x70>
 80045c0:	4650      	mov	r0, sl
 80045c2:	6921      	ldr	r1, [r4, #16]
 80045c4:	f000 face 	bl	8004b64 <_free_r>
 80045c8:	e7c7      	b.n	800455a <__ssputs_r+0x46>
	...

080045cc <_svfiprintf_r>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	4698      	mov	r8, r3
 80045d2:	898b      	ldrh	r3, [r1, #12]
 80045d4:	4607      	mov	r7, r0
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	460d      	mov	r5, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	b09d      	sub	sp, #116	; 0x74
 80045de:	d50e      	bpl.n	80045fe <_svfiprintf_r+0x32>
 80045e0:	690b      	ldr	r3, [r1, #16]
 80045e2:	b963      	cbnz	r3, 80045fe <_svfiprintf_r+0x32>
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	f000 fb09 	bl	8004bfc <_malloc_r>
 80045ea:	6028      	str	r0, [r5, #0]
 80045ec:	6128      	str	r0, [r5, #16]
 80045ee:	b920      	cbnz	r0, 80045fa <_svfiprintf_r+0x2e>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e0d1      	b.n	800479e <_svfiprintf_r+0x1d2>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	616b      	str	r3, [r5, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	9309      	str	r3, [sp, #36]	; 0x24
 8004602:	2320      	movs	r3, #32
 8004604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004608:	2330      	movs	r3, #48	; 0x30
 800460a:	f04f 0901 	mov.w	r9, #1
 800460e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004612:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047b8 <_svfiprintf_r+0x1ec>
 8004616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461a:	4623      	mov	r3, r4
 800461c:	469a      	mov	sl, r3
 800461e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004622:	b10a      	cbz	r2, 8004628 <_svfiprintf_r+0x5c>
 8004624:	2a25      	cmp	r2, #37	; 0x25
 8004626:	d1f9      	bne.n	800461c <_svfiprintf_r+0x50>
 8004628:	ebba 0b04 	subs.w	fp, sl, r4
 800462c:	d00b      	beq.n	8004646 <_svfiprintf_r+0x7a>
 800462e:	465b      	mov	r3, fp
 8004630:	4622      	mov	r2, r4
 8004632:	4629      	mov	r1, r5
 8004634:	4638      	mov	r0, r7
 8004636:	f7ff ff6d 	bl	8004514 <__ssputs_r>
 800463a:	3001      	adds	r0, #1
 800463c:	f000 80aa 	beq.w	8004794 <_svfiprintf_r+0x1c8>
 8004640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004642:	445a      	add	r2, fp
 8004644:	9209      	str	r2, [sp, #36]	; 0x24
 8004646:	f89a 3000 	ldrb.w	r3, [sl]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80a2 	beq.w	8004794 <_svfiprintf_r+0x1c8>
 8004650:	2300      	movs	r3, #0
 8004652:	f04f 32ff 	mov.w	r2, #4294967295
 8004656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800465a:	f10a 0a01 	add.w	sl, sl, #1
 800465e:	9304      	str	r3, [sp, #16]
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004666:	931a      	str	r3, [sp, #104]	; 0x68
 8004668:	4654      	mov	r4, sl
 800466a:	2205      	movs	r2, #5
 800466c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004670:	4851      	ldr	r0, [pc, #324]	; (80047b8 <_svfiprintf_r+0x1ec>)
 8004672:	f000 fa41 	bl	8004af8 <memchr>
 8004676:	9a04      	ldr	r2, [sp, #16]
 8004678:	b9d8      	cbnz	r0, 80046b2 <_svfiprintf_r+0xe6>
 800467a:	06d0      	lsls	r0, r2, #27
 800467c:	bf44      	itt	mi
 800467e:	2320      	movmi	r3, #32
 8004680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004684:	0711      	lsls	r1, r2, #28
 8004686:	bf44      	itt	mi
 8004688:	232b      	movmi	r3, #43	; 0x2b
 800468a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468e:	f89a 3000 	ldrb.w	r3, [sl]
 8004692:	2b2a      	cmp	r3, #42	; 0x2a
 8004694:	d015      	beq.n	80046c2 <_svfiprintf_r+0xf6>
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	9a07      	ldr	r2, [sp, #28]
 80046a0:	4621      	mov	r1, r4
 80046a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a6:	3b30      	subs	r3, #48	; 0x30
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d94e      	bls.n	800474a <_svfiprintf_r+0x17e>
 80046ac:	b1b0      	cbz	r0, 80046dc <_svfiprintf_r+0x110>
 80046ae:	9207      	str	r2, [sp, #28]
 80046b0:	e014      	b.n	80046dc <_svfiprintf_r+0x110>
 80046b2:	eba0 0308 	sub.w	r3, r0, r8
 80046b6:	fa09 f303 	lsl.w	r3, r9, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	46a2      	mov	sl, r4
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	e7d2      	b.n	8004668 <_svfiprintf_r+0x9c>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9103      	str	r1, [sp, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfbb      	ittet	lt
 80046ce:	425b      	neglt	r3, r3
 80046d0:	f042 0202 	orrlt.w	r2, r2, #2
 80046d4:	9307      	strge	r3, [sp, #28]
 80046d6:	9307      	strlt	r3, [sp, #28]
 80046d8:	bfb8      	it	lt
 80046da:	9204      	strlt	r2, [sp, #16]
 80046dc:	7823      	ldrb	r3, [r4, #0]
 80046de:	2b2e      	cmp	r3, #46	; 0x2e
 80046e0:	d10c      	bne.n	80046fc <_svfiprintf_r+0x130>
 80046e2:	7863      	ldrb	r3, [r4, #1]
 80046e4:	2b2a      	cmp	r3, #42	; 0x2a
 80046e6:	d135      	bne.n	8004754 <_svfiprintf_r+0x188>
 80046e8:	9b03      	ldr	r3, [sp, #12]
 80046ea:	3402      	adds	r4, #2
 80046ec:	1d1a      	adds	r2, r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	9203      	str	r2, [sp, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfb8      	it	lt
 80046f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80046fa:	9305      	str	r3, [sp, #20]
 80046fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047c8 <_svfiprintf_r+0x1fc>
 8004700:	2203      	movs	r2, #3
 8004702:	4650      	mov	r0, sl
 8004704:	7821      	ldrb	r1, [r4, #0]
 8004706:	f000 f9f7 	bl	8004af8 <memchr>
 800470a:	b140      	cbz	r0, 800471e <_svfiprintf_r+0x152>
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	eba0 000a 	sub.w	r0, r0, sl
 8004712:	fa03 f000 	lsl.w	r0, r3, r0
 8004716:	9b04      	ldr	r3, [sp, #16]
 8004718:	3401      	adds	r4, #1
 800471a:	4303      	orrs	r3, r0
 800471c:	9304      	str	r3, [sp, #16]
 800471e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004722:	2206      	movs	r2, #6
 8004724:	4825      	ldr	r0, [pc, #148]	; (80047bc <_svfiprintf_r+0x1f0>)
 8004726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800472a:	f000 f9e5 	bl	8004af8 <memchr>
 800472e:	2800      	cmp	r0, #0
 8004730:	d038      	beq.n	80047a4 <_svfiprintf_r+0x1d8>
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <_svfiprintf_r+0x1f4>)
 8004734:	bb1b      	cbnz	r3, 800477e <_svfiprintf_r+0x1b2>
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	3307      	adds	r3, #7
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	3308      	adds	r3, #8
 8004740:	9303      	str	r3, [sp, #12]
 8004742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004744:	4433      	add	r3, r6
 8004746:	9309      	str	r3, [sp, #36]	; 0x24
 8004748:	e767      	b.n	800461a <_svfiprintf_r+0x4e>
 800474a:	460c      	mov	r4, r1
 800474c:	2001      	movs	r0, #1
 800474e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004752:	e7a5      	b.n	80046a0 <_svfiprintf_r+0xd4>
 8004754:	2300      	movs	r3, #0
 8004756:	f04f 0c0a 	mov.w	ip, #10
 800475a:	4619      	mov	r1, r3
 800475c:	3401      	adds	r4, #1
 800475e:	9305      	str	r3, [sp, #20]
 8004760:	4620      	mov	r0, r4
 8004762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004766:	3a30      	subs	r2, #48	; 0x30
 8004768:	2a09      	cmp	r2, #9
 800476a:	d903      	bls.n	8004774 <_svfiprintf_r+0x1a8>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0c5      	beq.n	80046fc <_svfiprintf_r+0x130>
 8004770:	9105      	str	r1, [sp, #20]
 8004772:	e7c3      	b.n	80046fc <_svfiprintf_r+0x130>
 8004774:	4604      	mov	r4, r0
 8004776:	2301      	movs	r3, #1
 8004778:	fb0c 2101 	mla	r1, ip, r1, r2
 800477c:	e7f0      	b.n	8004760 <_svfiprintf_r+0x194>
 800477e:	ab03      	add	r3, sp, #12
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	462a      	mov	r2, r5
 8004784:	4638      	mov	r0, r7
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <_svfiprintf_r+0x1f8>)
 8004788:	a904      	add	r1, sp, #16
 800478a:	f3af 8000 	nop.w
 800478e:	1c42      	adds	r2, r0, #1
 8004790:	4606      	mov	r6, r0
 8004792:	d1d6      	bne.n	8004742 <_svfiprintf_r+0x176>
 8004794:	89ab      	ldrh	r3, [r5, #12]
 8004796:	065b      	lsls	r3, r3, #25
 8004798:	f53f af2c 	bmi.w	80045f4 <_svfiprintf_r+0x28>
 800479c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800479e:	b01d      	add	sp, #116	; 0x74
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	ab03      	add	r3, sp, #12
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	462a      	mov	r2, r5
 80047aa:	4638      	mov	r0, r7
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <_svfiprintf_r+0x1f8>)
 80047ae:	a904      	add	r1, sp, #16
 80047b0:	f000 f87c 	bl	80048ac <_printf_i>
 80047b4:	e7eb      	b.n	800478e <_svfiprintf_r+0x1c2>
 80047b6:	bf00      	nop
 80047b8:	08004e08 	.word	0x08004e08
 80047bc:	08004e12 	.word	0x08004e12
 80047c0:	00000000 	.word	0x00000000
 80047c4:	08004515 	.word	0x08004515
 80047c8:	08004e0e 	.word	0x08004e0e

080047cc <_printf_common>:
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	4616      	mov	r6, r2
 80047d2:	4699      	mov	r9, r3
 80047d4:	688a      	ldr	r2, [r1, #8]
 80047d6:	690b      	ldr	r3, [r1, #16]
 80047d8:	4607      	mov	r7, r0
 80047da:	4293      	cmp	r3, r2
 80047dc:	bfb8      	it	lt
 80047de:	4613      	movlt	r3, r2
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e6:	460c      	mov	r4, r1
 80047e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047ec:	b10a      	cbz	r2, 80047f2 <_printf_common+0x26>
 80047ee:	3301      	adds	r3, #1
 80047f0:	6033      	str	r3, [r6, #0]
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	0699      	lsls	r1, r3, #26
 80047f6:	bf42      	ittt	mi
 80047f8:	6833      	ldrmi	r3, [r6, #0]
 80047fa:	3302      	addmi	r3, #2
 80047fc:	6033      	strmi	r3, [r6, #0]
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	f015 0506 	ands.w	r5, r5, #6
 8004804:	d106      	bne.n	8004814 <_printf_common+0x48>
 8004806:	f104 0a19 	add.w	sl, r4, #25
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	6832      	ldr	r2, [r6, #0]
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	42ab      	cmp	r3, r5
 8004812:	dc28      	bgt.n	8004866 <_printf_common+0x9a>
 8004814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004818:	1e13      	subs	r3, r2, #0
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	bf18      	it	ne
 800481e:	2301      	movne	r3, #1
 8004820:	0692      	lsls	r2, r2, #26
 8004822:	d42d      	bmi.n	8004880 <_printf_common+0xb4>
 8004824:	4649      	mov	r1, r9
 8004826:	4638      	mov	r0, r7
 8004828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d020      	beq.n	8004874 <_printf_common+0xa8>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	68e5      	ldr	r5, [r4, #12]
 8004836:	f003 0306 	and.w	r3, r3, #6
 800483a:	2b04      	cmp	r3, #4
 800483c:	bf18      	it	ne
 800483e:	2500      	movne	r5, #0
 8004840:	6832      	ldr	r2, [r6, #0]
 8004842:	f04f 0600 	mov.w	r6, #0
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	bf08      	it	eq
 800484a:	1aad      	subeq	r5, r5, r2
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	bf08      	it	eq
 8004850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004854:	4293      	cmp	r3, r2
 8004856:	bfc4      	itt	gt
 8004858:	1a9b      	subgt	r3, r3, r2
 800485a:	18ed      	addgt	r5, r5, r3
 800485c:	341a      	adds	r4, #26
 800485e:	42b5      	cmp	r5, r6
 8004860:	d11a      	bne.n	8004898 <_printf_common+0xcc>
 8004862:	2000      	movs	r0, #0
 8004864:	e008      	b.n	8004878 <_printf_common+0xac>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4649      	mov	r1, r9
 800486c:	4638      	mov	r0, r7
 800486e:	47c0      	blx	r8
 8004870:	3001      	adds	r0, #1
 8004872:	d103      	bne.n	800487c <_printf_common+0xb0>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	3501      	adds	r5, #1
 800487e:	e7c4      	b.n	800480a <_printf_common+0x3e>
 8004880:	2030      	movs	r0, #48	; 0x30
 8004882:	18e1      	adds	r1, r4, r3
 8004884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488e:	4422      	add	r2, r4
 8004890:	3302      	adds	r3, #2
 8004892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004896:	e7c5      	b.n	8004824 <_printf_common+0x58>
 8004898:	2301      	movs	r3, #1
 800489a:	4622      	mov	r2, r4
 800489c:	4649      	mov	r1, r9
 800489e:	4638      	mov	r0, r7
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0e6      	beq.n	8004874 <_printf_common+0xa8>
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7d9      	b.n	800485e <_printf_common+0x92>
	...

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	460c      	mov	r4, r1
 80048b2:	7e27      	ldrb	r7, [r4, #24]
 80048b4:	4691      	mov	r9, r2
 80048b6:	2f78      	cmp	r7, #120	; 0x78
 80048b8:	4680      	mov	r8, r0
 80048ba:	469a      	mov	sl, r3
 80048bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	; 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d9 	beq.w	8004a80 <_printf_i+0x1d4>
 80048ce:	2f58      	cmp	r7, #88	; 0x58
 80048d0:	f000 80a4 	beq.w	8004a1c <_printf_i+0x170>
 80048d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a001      	add	r0, pc, #4	; (adr r0, 80048ec <_printf_i+0x40>)
 80048e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a67 	.word	0x08004a67
 800491c:	08004989 	.word	0x08004989
 8004920:	08004a49 	.word	0x08004a49
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a89 	.word	0x08004a89
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004989 	.word	0x08004989
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a51 	.word	0x08004a51
 8004944:	680b      	ldr	r3, [r1, #0]
 8004946:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	600a      	str	r2, [r1, #0]
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e0a4      	b.n	8004aa2 <_printf_i+0x1f6>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	6808      	ldr	r0, [r1, #0]
 800495c:	062e      	lsls	r6, r5, #24
 800495e:	f100 0304 	add.w	r3, r0, #4
 8004962:	d50a      	bpl.n	800497a <_printf_i+0xce>
 8004964:	6805      	ldr	r5, [r0, #0]
 8004966:	600b      	str	r3, [r1, #0]
 8004968:	2d00      	cmp	r5, #0
 800496a:	da03      	bge.n	8004974 <_printf_i+0xc8>
 800496c:	232d      	movs	r3, #45	; 0x2d
 800496e:	426d      	negs	r5, r5
 8004970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004974:	230a      	movs	r3, #10
 8004976:	485e      	ldr	r0, [pc, #376]	; (8004af0 <_printf_i+0x244>)
 8004978:	e019      	b.n	80049ae <_printf_i+0x102>
 800497a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800497e:	6805      	ldr	r5, [r0, #0]
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	bf18      	it	ne
 8004984:	b22d      	sxthne	r5, r5
 8004986:	e7ef      	b.n	8004968 <_printf_i+0xbc>
 8004988:	680b      	ldr	r3, [r1, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	1d18      	adds	r0, r3, #4
 800498e:	6008      	str	r0, [r1, #0]
 8004990:	0628      	lsls	r0, r5, #24
 8004992:	d501      	bpl.n	8004998 <_printf_i+0xec>
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	e002      	b.n	800499e <_printf_i+0xf2>
 8004998:	0669      	lsls	r1, r5, #25
 800499a:	d5fb      	bpl.n	8004994 <_printf_i+0xe8>
 800499c:	881d      	ldrh	r5, [r3, #0]
 800499e:	2f6f      	cmp	r7, #111	; 0x6f
 80049a0:	bf0c      	ite	eq
 80049a2:	2308      	moveq	r3, #8
 80049a4:	230a      	movne	r3, #10
 80049a6:	4852      	ldr	r0, [pc, #328]	; (8004af0 <_printf_i+0x244>)
 80049a8:	2100      	movs	r1, #0
 80049aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ae:	6866      	ldr	r6, [r4, #4]
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	bfa8      	it	ge
 80049b4:	6821      	ldrge	r1, [r4, #0]
 80049b6:	60a6      	str	r6, [r4, #8]
 80049b8:	bfa4      	itt	ge
 80049ba:	f021 0104 	bicge.w	r1, r1, #4
 80049be:	6021      	strge	r1, [r4, #0]
 80049c0:	b90d      	cbnz	r5, 80049c6 <_printf_i+0x11a>
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d04d      	beq.n	8004a62 <_printf_i+0x1b6>
 80049c6:	4616      	mov	r6, r2
 80049c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80049cc:	fb03 5711 	mls	r7, r3, r1, r5
 80049d0:	5dc7      	ldrb	r7, [r0, r7]
 80049d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d6:	462f      	mov	r7, r5
 80049d8:	42bb      	cmp	r3, r7
 80049da:	460d      	mov	r5, r1
 80049dc:	d9f4      	bls.n	80049c8 <_printf_i+0x11c>
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d10b      	bne.n	80049fa <_printf_i+0x14e>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	07df      	lsls	r7, r3, #31
 80049e6:	d508      	bpl.n	80049fa <_printf_i+0x14e>
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	6861      	ldr	r1, [r4, #4]
 80049ec:	4299      	cmp	r1, r3
 80049ee:	bfde      	ittt	le
 80049f0:	2330      	movle	r3, #48	; 0x30
 80049f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049fa:	1b92      	subs	r2, r2, r6
 80049fc:	6122      	str	r2, [r4, #16]
 80049fe:	464b      	mov	r3, r9
 8004a00:	4621      	mov	r1, r4
 8004a02:	4640      	mov	r0, r8
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	aa03      	add	r2, sp, #12
 8004a0a:	f7ff fedf 	bl	80047cc <_printf_common>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d14c      	bne.n	8004aac <_printf_i+0x200>
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	b004      	add	sp, #16
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	4834      	ldr	r0, [pc, #208]	; (8004af0 <_printf_i+0x244>)
 8004a1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a22:	680e      	ldr	r6, [r1, #0]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a2a:	061f      	lsls	r7, r3, #24
 8004a2c:	600e      	str	r6, [r1, #0]
 8004a2e:	d514      	bpl.n	8004a5a <_printf_i+0x1ae>
 8004a30:	07d9      	lsls	r1, r3, #31
 8004a32:	bf44      	itt	mi
 8004a34:	f043 0320 	orrmi.w	r3, r3, #32
 8004a38:	6023      	strmi	r3, [r4, #0]
 8004a3a:	b91d      	cbnz	r5, 8004a44 <_printf_i+0x198>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f023 0320 	bic.w	r3, r3, #32
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	2310      	movs	r3, #16
 8004a46:	e7af      	b.n	80049a8 <_printf_i+0xfc>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f043 0320 	orr.w	r3, r3, #32
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2378      	movs	r3, #120	; 0x78
 8004a52:	4828      	ldr	r0, [pc, #160]	; (8004af4 <_printf_i+0x248>)
 8004a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a58:	e7e3      	b.n	8004a22 <_printf_i+0x176>
 8004a5a:	065e      	lsls	r6, r3, #25
 8004a5c:	bf48      	it	mi
 8004a5e:	b2ad      	uxthmi	r5, r5
 8004a60:	e7e6      	b.n	8004a30 <_printf_i+0x184>
 8004a62:	4616      	mov	r6, r2
 8004a64:	e7bb      	b.n	80049de <_printf_i+0x132>
 8004a66:	680b      	ldr	r3, [r1, #0]
 8004a68:	6826      	ldr	r6, [r4, #0]
 8004a6a:	1d1d      	adds	r5, r3, #4
 8004a6c:	6960      	ldr	r0, [r4, #20]
 8004a6e:	600d      	str	r5, [r1, #0]
 8004a70:	0635      	lsls	r5, r6, #24
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	d501      	bpl.n	8004a7a <_printf_i+0x1ce>
 8004a76:	6018      	str	r0, [r3, #0]
 8004a78:	e002      	b.n	8004a80 <_printf_i+0x1d4>
 8004a7a:	0671      	lsls	r1, r6, #25
 8004a7c:	d5fb      	bpl.n	8004a76 <_printf_i+0x1ca>
 8004a7e:	8018      	strh	r0, [r3, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	4616      	mov	r6, r2
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	e7ba      	b.n	80049fe <_printf_i+0x152>
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	600a      	str	r2, [r1, #0]
 8004a8e:	681e      	ldr	r6, [r3, #0]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4630      	mov	r0, r6
 8004a94:	6862      	ldr	r2, [r4, #4]
 8004a96:	f000 f82f 	bl	8004af8 <memchr>
 8004a9a:	b108      	cbz	r0, 8004aa0 <_printf_i+0x1f4>
 8004a9c:	1b80      	subs	r0, r0, r6
 8004a9e:	6060      	str	r0, [r4, #4]
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	e7a8      	b.n	80049fe <_printf_i+0x152>
 8004aac:	4632      	mov	r2, r6
 8004aae:	4649      	mov	r1, r9
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	47d0      	blx	sl
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0ab      	beq.n	8004a12 <_printf_i+0x166>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	079b      	lsls	r3, r3, #30
 8004abe:	d413      	bmi.n	8004ae8 <_printf_i+0x23c>
 8004ac0:	68e0      	ldr	r0, [r4, #12]
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	bfb8      	it	lt
 8004ac8:	4618      	movlt	r0, r3
 8004aca:	e7a4      	b.n	8004a16 <_printf_i+0x16a>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4632      	mov	r2, r6
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	47d0      	blx	sl
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d09b      	beq.n	8004a12 <_printf_i+0x166>
 8004ada:	3501      	adds	r5, #1
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	9903      	ldr	r1, [sp, #12]
 8004ae0:	1a5b      	subs	r3, r3, r1
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dcf2      	bgt.n	8004acc <_printf_i+0x220>
 8004ae6:	e7eb      	b.n	8004ac0 <_printf_i+0x214>
 8004ae8:	2500      	movs	r5, #0
 8004aea:	f104 0619 	add.w	r6, r4, #25
 8004aee:	e7f5      	b.n	8004adc <_printf_i+0x230>
 8004af0:	08004e19 	.word	0x08004e19
 8004af4:	08004e2a 	.word	0x08004e2a

08004af8 <memchr>:
 8004af8:	4603      	mov	r3, r0
 8004afa:	b510      	push	{r4, lr}
 8004afc:	b2c9      	uxtb	r1, r1
 8004afe:	4402      	add	r2, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	d101      	bne.n	8004b0a <memchr+0x12>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e003      	b.n	8004b12 <memchr+0x1a>
 8004b0a:	7804      	ldrb	r4, [r0, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	428c      	cmp	r4, r1
 8004b10:	d1f6      	bne.n	8004b00 <memchr+0x8>
 8004b12:	bd10      	pop	{r4, pc}

08004b14 <memcpy>:
 8004b14:	440a      	add	r2, r1
 8004b16:	4291      	cmp	r1, r2
 8004b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b1c:	d100      	bne.n	8004b20 <memcpy+0xc>
 8004b1e:	4770      	bx	lr
 8004b20:	b510      	push	{r4, lr}
 8004b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b26:	4291      	cmp	r1, r2
 8004b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b2c:	d1f9      	bne.n	8004b22 <memcpy+0xe>
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <memmove>:
 8004b30:	4288      	cmp	r0, r1
 8004b32:	b510      	push	{r4, lr}
 8004b34:	eb01 0402 	add.w	r4, r1, r2
 8004b38:	d902      	bls.n	8004b40 <memmove+0x10>
 8004b3a:	4284      	cmp	r4, r0
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	d807      	bhi.n	8004b50 <memmove+0x20>
 8004b40:	1e43      	subs	r3, r0, #1
 8004b42:	42a1      	cmp	r1, r4
 8004b44:	d008      	beq.n	8004b58 <memmove+0x28>
 8004b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4e:	e7f8      	b.n	8004b42 <memmove+0x12>
 8004b50:	4601      	mov	r1, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	428a      	cmp	r2, r1
 8004b56:	d100      	bne.n	8004b5a <memmove+0x2a>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b62:	e7f7      	b.n	8004b54 <memmove+0x24>

08004b64 <_free_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4605      	mov	r5, r0
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d043      	beq.n	8004bf4 <_free_r+0x90>
 8004b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b70:	1f0c      	subs	r4, r1, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfb8      	it	lt
 8004b76:	18e4      	addlt	r4, r4, r3
 8004b78:	f000 f8d0 	bl	8004d1c <__malloc_lock>
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <_free_r+0x94>)
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	4610      	mov	r0, r2
 8004b82:	b933      	cbnz	r3, 8004b92 <_free_r+0x2e>
 8004b84:	6063      	str	r3, [r4, #4]
 8004b86:	6014      	str	r4, [r2, #0]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8e:	f000 b8cb 	b.w	8004d28 <__malloc_unlock>
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	d90a      	bls.n	8004bac <_free_r+0x48>
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	1862      	adds	r2, r4, r1
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bf01      	itttt	eq
 8004b9e:	681a      	ldreq	r2, [r3, #0]
 8004ba0:	685b      	ldreq	r3, [r3, #4]
 8004ba2:	1852      	addeq	r2, r2, r1
 8004ba4:	6022      	streq	r2, [r4, #0]
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	6004      	str	r4, [r0, #0]
 8004baa:	e7ed      	b.n	8004b88 <_free_r+0x24>
 8004bac:	461a      	mov	r2, r3
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	b10b      	cbz	r3, 8004bb6 <_free_r+0x52>
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	d9fa      	bls.n	8004bac <_free_r+0x48>
 8004bb6:	6811      	ldr	r1, [r2, #0]
 8004bb8:	1850      	adds	r0, r2, r1
 8004bba:	42a0      	cmp	r0, r4
 8004bbc:	d10b      	bne.n	8004bd6 <_free_r+0x72>
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	4401      	add	r1, r0
 8004bc2:	1850      	adds	r0, r2, r1
 8004bc4:	4283      	cmp	r3, r0
 8004bc6:	6011      	str	r1, [r2, #0]
 8004bc8:	d1de      	bne.n	8004b88 <_free_r+0x24>
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4401      	add	r1, r0
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e7d8      	b.n	8004b88 <_free_r+0x24>
 8004bd6:	d902      	bls.n	8004bde <_free_r+0x7a>
 8004bd8:	230c      	movs	r3, #12
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	e7d4      	b.n	8004b88 <_free_r+0x24>
 8004bde:	6820      	ldr	r0, [r4, #0]
 8004be0:	1821      	adds	r1, r4, r0
 8004be2:	428b      	cmp	r3, r1
 8004be4:	bf01      	itttt	eq
 8004be6:	6819      	ldreq	r1, [r3, #0]
 8004be8:	685b      	ldreq	r3, [r3, #4]
 8004bea:	1809      	addeq	r1, r1, r0
 8004bec:	6021      	streq	r1, [r4, #0]
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	6054      	str	r4, [r2, #4]
 8004bf2:	e7c9      	b.n	8004b88 <_free_r+0x24>
 8004bf4:	bd38      	pop	{r3, r4, r5, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000174 	.word	0x20000174

08004bfc <_malloc_r>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	1ccd      	adds	r5, r1, #3
 8004c00:	f025 0503 	bic.w	r5, r5, #3
 8004c04:	3508      	adds	r5, #8
 8004c06:	2d0c      	cmp	r5, #12
 8004c08:	bf38      	it	cc
 8004c0a:	250c      	movcc	r5, #12
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	4606      	mov	r6, r0
 8004c10:	db01      	blt.n	8004c16 <_malloc_r+0x1a>
 8004c12:	42a9      	cmp	r1, r5
 8004c14:	d903      	bls.n	8004c1e <_malloc_r+0x22>
 8004c16:	230c      	movs	r3, #12
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1e:	f000 f87d 	bl	8004d1c <__malloc_lock>
 8004c22:	4921      	ldr	r1, [pc, #132]	; (8004ca8 <_malloc_r+0xac>)
 8004c24:	680a      	ldr	r2, [r1, #0]
 8004c26:	4614      	mov	r4, r2
 8004c28:	b99c      	cbnz	r4, 8004c52 <_malloc_r+0x56>
 8004c2a:	4f20      	ldr	r7, [pc, #128]	; (8004cac <_malloc_r+0xb0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b923      	cbnz	r3, 8004c3a <_malloc_r+0x3e>
 8004c30:	4621      	mov	r1, r4
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f862 	bl	8004cfc <_sbrk_r>
 8004c38:	6038      	str	r0, [r7, #0]
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 f85d 	bl	8004cfc <_sbrk_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d123      	bne.n	8004c8e <_malloc_r+0x92>
 8004c46:	230c      	movs	r3, #12
 8004c48:	4630      	mov	r0, r6
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	f000 f86c 	bl	8004d28 <__malloc_unlock>
 8004c50:	e7e3      	b.n	8004c1a <_malloc_r+0x1e>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	1b5b      	subs	r3, r3, r5
 8004c56:	d417      	bmi.n	8004c88 <_malloc_r+0x8c>
 8004c58:	2b0b      	cmp	r3, #11
 8004c5a:	d903      	bls.n	8004c64 <_malloc_r+0x68>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	441c      	add	r4, r3
 8004c60:	6025      	str	r5, [r4, #0]
 8004c62:	e004      	b.n	8004c6e <_malloc_r+0x72>
 8004c64:	6863      	ldr	r3, [r4, #4]
 8004c66:	42a2      	cmp	r2, r4
 8004c68:	bf0c      	ite	eq
 8004c6a:	600b      	streq	r3, [r1, #0]
 8004c6c:	6053      	strne	r3, [r2, #4]
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 f85a 	bl	8004d28 <__malloc_unlock>
 8004c74:	f104 000b 	add.w	r0, r4, #11
 8004c78:	1d23      	adds	r3, r4, #4
 8004c7a:	f020 0007 	bic.w	r0, r0, #7
 8004c7e:	1ac2      	subs	r2, r0, r3
 8004c80:	d0cc      	beq.n	8004c1c <_malloc_r+0x20>
 8004c82:	1a1b      	subs	r3, r3, r0
 8004c84:	50a3      	str	r3, [r4, r2]
 8004c86:	e7c9      	b.n	8004c1c <_malloc_r+0x20>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	6864      	ldr	r4, [r4, #4]
 8004c8c:	e7cc      	b.n	8004c28 <_malloc_r+0x2c>
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	f024 0403 	bic.w	r4, r4, #3
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d0e3      	beq.n	8004c60 <_malloc_r+0x64>
 8004c98:	1a21      	subs	r1, r4, r0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 f82e 	bl	8004cfc <_sbrk_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1dd      	bne.n	8004c60 <_malloc_r+0x64>
 8004ca4:	e7cf      	b.n	8004c46 <_malloc_r+0x4a>
 8004ca6:	bf00      	nop
 8004ca8:	20000174 	.word	0x20000174
 8004cac:	20000178 	.word	0x20000178

08004cb0 <_realloc_r>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	460e      	mov	r6, r1
 8004cb8:	b921      	cbnz	r1, 8004cc4 <_realloc_r+0x14>
 8004cba:	4611      	mov	r1, r2
 8004cbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cc0:	f7ff bf9c 	b.w	8004bfc <_malloc_r>
 8004cc4:	b922      	cbnz	r2, 8004cd0 <_realloc_r+0x20>
 8004cc6:	f7ff ff4d 	bl	8004b64 <_free_r>
 8004cca:	4625      	mov	r5, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd0:	f000 f830 	bl	8004d34 <_malloc_usable_size_r>
 8004cd4:	42a0      	cmp	r0, r4
 8004cd6:	d20f      	bcs.n	8004cf8 <_realloc_r+0x48>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4638      	mov	r0, r7
 8004cdc:	f7ff ff8e 	bl	8004bfc <_malloc_r>
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0f2      	beq.n	8004ccc <_realloc_r+0x1c>
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4622      	mov	r2, r4
 8004cea:	f7ff ff13 	bl	8004b14 <memcpy>
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f7ff ff37 	bl	8004b64 <_free_r>
 8004cf6:	e7e9      	b.n	8004ccc <_realloc_r+0x1c>
 8004cf8:	4635      	mov	r5, r6
 8004cfa:	e7e7      	b.n	8004ccc <_realloc_r+0x1c>

08004cfc <_sbrk_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	2300      	movs	r3, #0
 8004d00:	4d05      	ldr	r5, [pc, #20]	; (8004d18 <_sbrk_r+0x1c>)
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fc ff2c 	bl	8001b64 <_sbrk>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_sbrk_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_sbrk_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000254 	.word	0x20000254

08004d1c <__malloc_lock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_lock+0x8>)
 8004d1e:	f000 b811 	b.w	8004d44 <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	2000025c 	.word	0x2000025c

08004d28 <__malloc_unlock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_unlock+0x8>)
 8004d2a:	f000 b80c 	b.w	8004d46 <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	2000025c 	.word	0x2000025c

08004d34 <_malloc_usable_size_r>:
 8004d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d38:	1f18      	subs	r0, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfbc      	itt	lt
 8004d3e:	580b      	ldrlt	r3, [r1, r0]
 8004d40:	18c0      	addlt	r0, r0, r3
 8004d42:	4770      	bx	lr

08004d44 <__retarget_lock_acquire_recursive>:
 8004d44:	4770      	bx	lr

08004d46 <__retarget_lock_release_recursive>:
 8004d46:	4770      	bx	lr

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
